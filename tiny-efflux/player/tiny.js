var eTiny=function(e){var n={};function t(a){if(n[a])return n[a].exports;var i=n[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,t),i.l=!0,i.exports}return t.m=e,t.c=n,t.d=function(e,n,a){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:a})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(t.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)t.d(a,i,function(n){return e[n]}.bind(null,i));return a},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=9)}([function(e,n){e.exports={set(e,n,t){e[n]=t}}},function(e,n,t){"use strict";var a=window.URL||window.webkitURL;e.exports=function(e,n){try{try{var t;try{(t=new(window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder)).append(e),t=t.getBlob()}catch(n){t=new Blob([e])}return new Worker(a.createObjectURL(t))}catch(n){return new Worker("data:application/javascript,"+encodeURIComponent(e))}}catch(e){if(!n)throw Error("Inline worker is not supported");return new Worker(n)}}},function(e,n){e.exports={ios:!1}},function(e,n){function t(e,n){this.input=e.createGain(),this.output=e.createGain(),this._bandpass=e.createBiquadFilter(),this._bpWet=e.createGain(),this._bpDry=e.createGain(),this._ws=e.createWaveShaper(),this._lowpass=e.createBiquadFilter(),this.input.connect(this._bandpass),this._bandpass.connect(this._bpWet),this._bandpass.connect(this._bpDry),this._bpWet.connect(this._ws),this._bpDry.connect(this._ws),this._ws.connect(this._lowpass),this._lowpass.connect(this.output);var t=this.meta.params;n=n||{},this._bandpass.frequency.value=n.color||t.color.defaultValue,this._bpWet.gain.value=n.preBand||t.preBand.defaultValue,this._lowpass.frequency.value=n.postCut||t.postCut.defaultValue,this.drive=n.drive||t.drive.defaultValue,this._bpDry.gain.value=n.preBand?1-n.preBand:1-t.preBand.defaultValue}t.prototype=Object.create(null,{connect:{value:function(e){this.output.connect(e.input?e.input:e)}},disconnect:{value:function(){this.output.disconnect()}},meta:{value:{name:"Overdrive",params:{preBand:{min:0,max:1,defaultValue:.5,type:"float"},color:{min:0,max:22050,defaultValue:800,type:"float"},drive:{min:0,max:1,defaultValue:.5,type:"float"},postCut:{min:0,max:22050,defaultValue:3e3,type:"float"}}}},preBand:{enumerable:!0,get:function(){return this._bpWet.gain.value},set:function(e){this._bpWet.gain.setValueAtTime(e,0),this._bpDry.gain.setValueAtTime(1-e,0)}},color:{enumerable:!0,get:function(){return this._bandpass.frequency.value},set:function(e){this._bandpass.frequency.setValueAtTime(e,0)}},drive:{enumerable:!0,get:function(){return this._drive},set:function(e){var n=100*e,t=22050,a=new Float32Array(t),i=Math.PI/180;this._drive=e;for(var r=0;r<t;r++){var s=2*r/t-1;a[r]=(3+n)*s*20*i/(Math.PI+n*Math.abs(s))}this._ws.curve=a}},postCut:{enumerable:!0,get:function(){return this._lowpass.frequency.value},set:function(e){this._lowpass.frequency.setValueAtTime(e,0)}}}),e.exports=t},function(e,n,t){e.exports=function(){return t(1)('!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e){let n,r=0,o=[],a=[];function u(t,e){const n=new Float32Array(e);let r=0;for(let e=0;e<t.length;e++)n.set(t[e],r),r+=t[e].length;return n}function i(t,e,n){for(let r=0;r<n.length;r++)t.setUint8(e+r,n.charCodeAt(r))}self.addEventListener("message",t=>{switch(t.data.command){case"init":!function(t){n=t.sampleRate}(t.data.config);break;case"record":!function(t){o.push(t[0]),a.push(t[1]),r+=t[0].length}(t.data.buffer);break;case"exportWAV":!function(t){const e=u(o,r),s=u(a,r),f=function(t){const e=new ArrayBuffer(44+2*t.length),r=new DataView(e);return i(r,0,"RIFF"),r.setUint32(4,36+2*t.length,!0),i(r,8,"WAVE"),i(r,12,"fmt "),r.setUint32(16,16,!0),r.setUint16(20,1,!0),r.setUint16(22,2,!0),r.setUint32(24,n,!0),r.setUint32(28,4*n,!0),r.setUint16(32,4,!0),r.setUint16(34,16,!0),i(r,36,"data"),r.setUint32(40,2*t.length,!0),function(t,e,n){for(let r=0;r<n.length;r++,e+=2){const o=Math.max(-1,Math.min(1,n[r]));t.setInt16(e,o<0?32768*o:32767*o,!0)}}(r,44,t),r}(function(t,e){const n=t.length+e.length,r=new Float32Array(n);let o=0,a=0;for(;o<n;)r[o++]=t[a],r[o++]=e[a],a++;return r}(e,s)),c=new Blob([f],{type:t});self.postMessage(c)}(t.data.type);break;case"getBuffer":!function(){const t=[];t.push(u(o,r)),t.push(u(a,r)),self.postMessage(t)}();break;case"clear":r=0,o=[],a=[]}})}]);',null)}},function(e,n,t){e.exports=function(){return t(1)('!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t){let r,n;self.addEventListener("message",e=>{if(void 0!==(n=e.data))switch(n.cmd){case"start":clearInterval(r),r=setInterval(()=>{self.postMessage({cmd:"collect"})},"number"==typeof n.interval?n.interval:25);break;case"stop":clearInterval(r),r=null}},!1)}]);',null)}},function(e,n,t){t(7)(t(8))},function(e,n){e.exports=function(e){function n(e){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",e)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(e):"undefined"!=typeof eval?eval.call(null,e):n("EvalError: No eval function available")}catch(e){n(e)}}},function(e,n){e.exports='/* \n *  DSP.js - a comprehensive digital signal processing  library for javascript\n * \n *  Created by Corban Brook <corbanbrook@gmail.com> on 2010-01-01.\n *  Copyright 2010 Corban Brook. All rights reserved.\n *\n */\n\n////////////////////////////////////////////////////////////////////////////////\n//                                  CONSTANTS                                 //\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * DSP is an object which contains general purpose utility functions and constants\n */\nvar DSP = {\n  // Channels\n  LEFT:           0,\n  RIGHT:          1,\n  MIX:            2,\n\n  // Waveforms\n  SINE:           1,\n  TRIANGLE:       2,\n  SAW:            3,\n  SQUARE:         4,\n\n  // Filters\n  LOWPASS:        0,\n  HIGHPASS:       1,\n  BANDPASS:       2,\n  NOTCH:          3,\n\n  // Window functions\n  BARTLETT:       1,\n  BARTLETTHANN:   2,\n  BLACKMAN:       3,\n  COSINE:         4,\n  GAUSS:          5,\n  HAMMING:        6,\n  HANN:           7,\n  LANCZOS:        8,\n  RECTANGULAR:    9,\n  TRIANGULAR:     10,\n\n  // Loop modes\n  OFF:            0,\n  FW:             1,\n  BW:             2,\n  FWBW:           3,\n\n  // Math\n  TWO_PI:         2*Math.PI\n};\n\n// Setup arrays for platforms which do not support byte arrays\nfunction setupTypedArray(name, fallback) {\n  // check if TypedArray exists\n  // typeof on Minefield and Chrome return function, typeof on Webkit returns object.\n  if (typeof this[name] !== "function" && typeof this[name] !== "object") {\n    // nope.. check if WebGLArray exists\n    if (typeof this[fallback] === "function" && typeof this[fallback] !== "object") {\n      this[name] = this[fallback];\n    } else {\n      // nope.. set as Native JS array\n      this[name] = function(obj) {\n        if (obj instanceof Array) {\n          return obj;\n        } else if (typeof obj === "number") {\n          return new Array(obj);\n        }\n      };\n    }\n  }\n}\n\nsetupTypedArray("Float32Array", "WebGLFloatArray");\nsetupTypedArray("Int32Array",   "WebGLIntArray");\nsetupTypedArray("Uint16Array",  "WebGLUnsignedShortArray");\nsetupTypedArray("Uint8Array",   "WebGLUnsignedByteArray");\n\n\n////////////////////////////////////////////////////////////////////////////////\n//                            DSP UTILITY FUNCTIONS                           //\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Inverts the phase of a signal\n *\n * @param {Array} buffer A sample buffer\n *\n * @returns The inverted sample buffer\n */\nDSP.invert = function(buffer) {\n  for (var i = 0, len = buffer.length; i < len; i++) {\n    buffer[i] *= -1;\n  }\n\n  return buffer;\n};\n\n/**\n * Converts split-stereo (dual mono) sample buffers into a stereo interleaved sample buffer\n *\n * @param {Array} left  A sample buffer\n * @param {Array} right A sample buffer\n *\n * @returns The stereo interleaved buffer\n */\nDSP.interleave = function(left, right) {\n  if (left.length !== right.length) {\n    throw "Can not interleave. Channel lengths differ.";\n  }\n \n  var stereoInterleaved = new Float32Array(left.length * 2);\n \n  for (var i = 0, len = left.length; i < len; i++) {\n    stereoInterleaved[2*i]   = left[i];\n    stereoInterleaved[2*i+1] = right[i];\n  }\n \n  return stereoInterleaved;\n};\n\n/**\n * Converts a stereo-interleaved sample buffer into split-stereo (dual mono) sample buffers\n *\n * @param {Array} buffer A stereo-interleaved sample buffer\n *\n * @returns an Array containing left and right channels\n */\nDSP.deinterleave = (function() {\n  var left, right, mix, deinterleaveChannel = []; \n\n  deinterleaveChannel[DSP.MIX] = function(buffer) {\n    for (var i = 0, len = buffer.length/2; i < len; i++) {\n      mix[i] = (buffer[2*i] + buffer[2*i+1]) / 2;\n    }\n    return mix;\n  };\n\n  deinterleaveChannel[DSP.LEFT] = function(buffer) {\n    for (var i = 0, len = buffer.length/2; i < len; i++) {\n      left[i]  = buffer[2*i];\n    }\n    return left;\n  };\n\n  deinterleaveChannel[DSP.RIGHT] = function(buffer) {\n    for (var i = 0, len = buffer.length/2; i < len; i++) {\n      right[i]  = buffer[2*i+1];\n    }\n    return right;\n  };\n\n  return function(channel, buffer) { \n    left  = left  || new Float32Array(buffer.length/2);\n    right = right || new Float32Array(buffer.length/2);\n    mix   = mix   || new Float32Array(buffer.length/2);\n\n    if (buffer.length/2 !== left.length) {\n      left  = new Float32Array(buffer.length/2);\n      right = new Float32Array(buffer.length/2);\n      mix   = new Float32Array(buffer.length/2);\n    }\n\n    return deinterleaveChannel[channel](buffer);\n  };\n}());\n\n/**\n * Separates a channel from a stereo-interleaved sample buffer\n *\n * @param {Array}  buffer A stereo-interleaved sample buffer\n * @param {Number} channel A channel constant (LEFT, RIGHT, MIX)\n *\n * @returns an Array containing a signal mono sample buffer\n */\nDSP.getChannel = DSP.deinterleave;\n\n/**\n * Helper method (for Reverb) to mix two (interleaved) samplebuffers. It\'s possible\n * to negate the second buffer while mixing and to perform a volume correction\n * on the final signal.\n *\n * @param {Array} sampleBuffer1 Array containing Float values or a Float32Array\n * @param {Array} sampleBuffer2 Array containing Float values or a Float32Array\n * @param {Boolean} negate When true inverts/flips the audio signal\n * @param {Number} volumeCorrection When you add multiple sample buffers, use this to tame your signal ;)\n *\n * @returns A new Float32Array interleaved buffer.\n */\nDSP.mixSampleBuffers = function(sampleBuffer1, sampleBuffer2, negate, volumeCorrection){\n  var outputSamples = new Float32Array(sampleBuffer1);\n\n  for(var i = 0; i<sampleBuffer1.length; i++){\n    outputSamples[i] += (negate ? -sampleBuffer2[i] : sampleBuffer2[i]) / volumeCorrection;\n  }\n \n  return outputSamples;\n}; \n\n// Biquad filter types\nDSP.LPF = 0;                // H(s) = 1 / (s^2 + s/Q + 1)\nDSP.HPF = 1;                // H(s) = s^2 / (s^2 + s/Q + 1)\nDSP.BPF_CONSTANT_SKIRT = 2; // H(s) = s / (s^2 + s/Q + 1)  (constant skirt gain, peak gain = Q)\nDSP.BPF_CONSTANT_PEAK = 3;  // H(s) = (s/Q) / (s^2 + s/Q + 1)      (constant 0 dB peak gain)\nDSP.NOTCH = 4;              // H(s) = (s^2 + 1) / (s^2 + s/Q + 1)\nDSP.APF = 5;                // H(s) = (s^2 - s/Q + 1) / (s^2 + s/Q + 1)\nDSP.PEAKING_EQ = 6;         // H(s) = (s^2 + s*(A/Q) + 1) / (s^2 + s/(A*Q) + 1)\nDSP.LOW_SHELF = 7;          // H(s) = A * (s^2 + (sqrt(A)/Q)*s + A)/(A*s^2 + (sqrt(A)/Q)*s + 1)\nDSP.HIGH_SHELF = 8;         // H(s) = A * (A*s^2 + (sqrt(A)/Q)*s + 1)/(s^2 + (sqrt(A)/Q)*s + A)\n\n// Biquad filter parameter types\nDSP.Q = 1;\nDSP.BW = 2; // SHARED with BACKWARDS LOOP MODE\nDSP.S = 3;\n\n// Find RMS of signal\nDSP.RMS = function(buffer) {\n  var total = 0;\n  \n  for (var i = 0, n = buffer.length; i < n; i++) {\n    total += buffer[i] * buffer[i];\n  }\n  \n  return Math.sqrt(total / n);\n};\n\n// Find Peak of signal\nDSP.Peak = function(buffer) {\n  var peak = 0;\n  \n  for (var i = 0, n = buffer.length; i < n; i++) {\n    peak = (Math.abs(buffer[i]) > peak) ? Math.abs(buffer[i]) : peak; \n  }\n  \n  return peak;\n};\n\n// Fourier Transform Module used by DFT, FFT, RFFT\nfunction FourierTransform(bufferSize, sampleRate) {\n  this.bufferSize = bufferSize;\n  this.sampleRate = sampleRate;\n  this.bandwidth  = 2 / bufferSize * sampleRate / 2;\n\n  this.spectrum   = new Float32Array(bufferSize/2);\n  this.real       = new Float32Array(bufferSize);\n  this.imag       = new Float32Array(bufferSize);\n\n  this.peakBand   = 0;\n  this.peak       = 0;\n\n  /**\n   * Calculates the *middle* frequency of an FFT band.\n   *\n   * @param {Number} index The index of the FFT band.\n   *\n   * @returns The middle frequency in Hz.\n   */\n  this.getBandFrequency = function(index) {\n    return this.bandwidth * index + this.bandwidth / 2;\n  };\n\n  this.calculateSpectrum = function() {\n    var spectrum  = this.spectrum,\n        real      = this.real,\n        imag      = this.imag,\n        bSi       = 2 / this.bufferSize,\n        sqrt      = Math.sqrt,\n        rval, \n        ival,\n        mag;\n\n    for (var i = 0, N = bufferSize/2; i < N; i++) {\n      rval = real[i];\n      ival = imag[i];\n      mag = bSi * sqrt(rval * rval + ival * ival);\n\n      if (mag > this.peak) {\n        this.peakBand = i;\n        this.peak = mag;\n      }\n\n      spectrum[i] = mag;\n    }\n  };\n}\n\n/**\n * DFT is a class for calculating the Discrete Fourier Transform of a signal.\n *\n * @param {Number} bufferSize The size of the sample buffer to be computed\n * @param {Number} sampleRate The sampleRate of the buffer (eg. 44100)\n *\n * @constructor\n */\nfunction DFT(bufferSize, sampleRate) {\n  FourierTransform.call(this, bufferSize, sampleRate);\n\n  var N = bufferSize/2 * bufferSize;\n  var TWO_PI = 2 * Math.PI;\n\n  this.sinTable = new Float32Array(N);\n  this.cosTable = new Float32Array(N);\n\n  for (var i = 0; i < N; i++) {\n    this.sinTable[i] = Math.sin(i * TWO_PI / bufferSize);\n    this.cosTable[i] = Math.cos(i * TWO_PI / bufferSize);\n  }\n}\n\n/**\n * Performs a forward transform on the sample buffer.\n * Converts a time domain signal to frequency domain spectra.\n *\n * @param {Array} buffer The sample buffer\n *\n * @returns The frequency spectrum array\n */\nDFT.prototype.forward = function(buffer) {\n  var real = this.real, \n      imag = this.imag,\n      rval,\n      ival;\n\n  for (var k = 0; k < this.bufferSize/2; k++) {\n    rval = 0.0;\n    ival = 0.0;\n\n    for (var n = 0; n < buffer.length; n++) {\n      rval += this.cosTable[k*n] * buffer[n];\n      ival += this.sinTable[k*n] * buffer[n];\n    }\n\n    real[k] = rval;\n    imag[k] = ival;\n  }\n\n  return this.calculateSpectrum();\n};\n\n\n/**\n * FFT is a class for calculating the Discrete Fourier Transform of a signal\n * with the Fast Fourier Transform algorithm.\n *\n * @param {Number} bufferSize The size of the sample buffer to be computed. Must be power of 2\n * @param {Number} sampleRate The sampleRate of the buffer (eg. 44100)\n *\n * @constructor\n */\nfunction FFT(bufferSize, sampleRate) {\n  FourierTransform.call(this, bufferSize, sampleRate);\n   \n  this.reverseTable = new Uint32Array(bufferSize);\n\n  var limit = 1;\n  var bit = bufferSize >> 1;\n\n  var i;\n\n  while (limit < bufferSize) {\n    for (i = 0; i < limit; i++) {\n      this.reverseTable[i + limit] = this.reverseTable[i] + bit;\n    }\n\n    limit = limit << 1;\n    bit = bit >> 1;\n  }\n\n  this.sinTable = new Float32Array(bufferSize);\n  this.cosTable = new Float32Array(bufferSize);\n\n  for (i = 0; i < bufferSize; i++) {\n    this.sinTable[i] = Math.sin(-Math.PI/i);\n    this.cosTable[i] = Math.cos(-Math.PI/i);\n  }\n}\n\n/**\n * Performs a forward transform on the sample buffer.\n * Converts a time domain signal to frequency domain spectra.\n *\n * @param {Array} buffer The sample buffer. Buffer Length must be power of 2\n *\n * @returns The frequency spectrum array\n */\nFFT.prototype.forward = function(buffer) {\n  // Locally scope variables for speed up\n  var bufferSize      = this.bufferSize,\n      cosTable        = this.cosTable,\n      sinTable        = this.sinTable,\n      reverseTable    = this.reverseTable,\n      real            = this.real,\n      imag            = this.imag,\n      spectrum        = this.spectrum;\n\n  var k = Math.floor(Math.log(bufferSize) / Math.LN2);\n\n  if (Math.pow(2, k) !== bufferSize) { throw "Invalid buffer size, must be a power of 2."; }\n  if (bufferSize !== buffer.length)  { throw "Supplied buffer is not the same size as defined FFT. FFT Size: " + bufferSize + " Buffer Size: " + buffer.length; }\n\n  var halfSize = 1,\n      phaseShiftStepReal,\n      phaseShiftStepImag,\n      currentPhaseShiftReal,\n      currentPhaseShiftImag,\n      off,\n      tr,\n      ti,\n      tmpReal,\n      i;\n\n  for (i = 0; i < bufferSize; i++) {\n    real[i] = buffer[reverseTable[i]];\n    imag[i] = 0;\n  }\n\n  while (halfSize < bufferSize) {\n    //phaseShiftStepReal = Math.cos(-Math.PI/halfSize);\n    //phaseShiftStepImag = Math.sin(-Math.PI/halfSize);\n    phaseShiftStepReal = cosTable[halfSize];\n    phaseShiftStepImag = sinTable[halfSize];\n    \n    currentPhaseShiftReal = 1;\n    currentPhaseShiftImag = 0;\n\n    for (var fftStep = 0; fftStep < halfSize; fftStep++) {\n      i = fftStep;\n\n      while (i < bufferSize) {\n        off = i + halfSize;\n        tr = (currentPhaseShiftReal * real[off]) - (currentPhaseShiftImag * imag[off]);\n        ti = (currentPhaseShiftReal * imag[off]) + (currentPhaseShiftImag * real[off]);\n\n        real[off] = real[i] - tr;\n        imag[off] = imag[i] - ti;\n        real[i] += tr;\n        imag[i] += ti;\n\n        i += halfSize << 1;\n      }\n\n      tmpReal = currentPhaseShiftReal;\n      currentPhaseShiftReal = (tmpReal * phaseShiftStepReal) - (currentPhaseShiftImag * phaseShiftStepImag);\n      currentPhaseShiftImag = (tmpReal * phaseShiftStepImag) + (currentPhaseShiftImag * phaseShiftStepReal);\n    }\n\n    halfSize = halfSize << 1;\n  }\n\n  return this.calculateSpectrum();\n};\n\nFFT.prototype.inverse = function(real, imag) {\n  // Locally scope variables for speed up\n  var bufferSize      = this.bufferSize,\n      cosTable        = this.cosTable,\n      sinTable        = this.sinTable,\n      reverseTable    = this.reverseTable,\n      spectrum        = this.spectrum;\n     \n      real = real || this.real;\n      imag = imag || this.imag;\n\n  var halfSize = 1,\n      phaseShiftStepReal,\n      phaseShiftStepImag,\n      currentPhaseShiftReal,\n      currentPhaseShiftImag,\n      off,\n      tr,\n      ti,\n      tmpReal,\n      i;\n\n  for (i = 0; i < bufferSize; i++) {\n    imag[i] *= -1;\n  }\n\n  var revReal = new Float32Array(bufferSize);\n  var revImag = new Float32Array(bufferSize);\n \n  for (i = 0; i < real.length; i++) {\n    revReal[i] = real[reverseTable[i]];\n    revImag[i] = imag[reverseTable[i]];\n  }\n \n  real = revReal;\n  imag = revImag;\n\n  while (halfSize < bufferSize) {\n    phaseShiftStepReal = cosTable[halfSize];\n    phaseShiftStepImag = sinTable[halfSize];\n    currentPhaseShiftReal = 1;\n    currentPhaseShiftImag = 0;\n\n    for (var fftStep = 0; fftStep < halfSize; fftStep++) {\n      i = fftStep;\n\n      while (i < bufferSize) {\n        off = i + halfSize;\n        tr = (currentPhaseShiftReal * real[off]) - (currentPhaseShiftImag * imag[off]);\n        ti = (currentPhaseShiftReal * imag[off]) + (currentPhaseShiftImag * real[off]);\n\n        real[off] = real[i] - tr;\n        imag[off] = imag[i] - ti;\n        real[i] += tr;\n        imag[i] += ti;\n\n        i += halfSize << 1;\n      }\n\n      tmpReal = currentPhaseShiftReal;\n      currentPhaseShiftReal = (tmpReal * phaseShiftStepReal) - (currentPhaseShiftImag * phaseShiftStepImag);\n      currentPhaseShiftImag = (tmpReal * phaseShiftStepImag) + (currentPhaseShiftImag * phaseShiftStepReal);\n    }\n\n    halfSize = halfSize << 1;\n  }\n\n  var buffer = new Float32Array(bufferSize); // this should be reused instead\n  for (i = 0; i < bufferSize; i++) {\n    buffer[i] = real[i] / bufferSize;\n  }\n\n  return buffer;\n};\n\n/**\n * RFFT is a class for calculating the Discrete Fourier Transform of a signal\n * with the Fast Fourier Transform algorithm.\n *\n * This method currently only contains a forward transform but is highly optimized.\n *\n * @param {Number} bufferSize The size of the sample buffer to be computed. Must be power of 2\n * @param {Number} sampleRate The sampleRate of the buffer (eg. 44100)\n *\n * @constructor\n */\n\n// lookup tables don\'t really gain us any speed, but they do increase\n// cache footprint, so don\'t use them in here\n\n// also we don\'t use sepearate arrays for real/imaginary parts\n\n// this one a little more than twice as fast as the one in FFT\n// however I only did the forward transform\n\n// the rest of this was translated from C, see http://www.jjj.de/fxt/\n// this is the real split radix FFT\n\nfunction RFFT(bufferSize, sampleRate) {\n  FourierTransform.call(this, bufferSize, sampleRate);\n\n  this.trans = new Float32Array(bufferSize);\n\n  this.reverseTable = new Uint32Array(bufferSize);\n\n  // don\'t use a lookup table to do the permute, use this instead\n  this.reverseBinPermute = function (dest, source) {\n    var bufferSize  = this.bufferSize, \n        halfSize    = bufferSize >>> 1, \n        nm1         = bufferSize - 1, \n        i = 1, r = 0, h;\n\n    dest[0] = source[0];\n\n    do {\n      r += halfSize;\n      dest[i] = source[r];\n      dest[r] = source[i];\n      \n      i++;\n\n      h = halfSize << 1;\n      while (h = h >> 1, !((r ^= h) & h));\n\n      if (r >= i) { \n        dest[i]     = source[r]; \n        dest[r]     = source[i];\n\n        dest[nm1-i] = source[nm1-r]; \n        dest[nm1-r] = source[nm1-i];\n      }\n      i++;\n    } while (i < halfSize);\n    dest[nm1] = source[nm1];\n  };\n\n  this.generateReverseTable = function () {\n    var bufferSize  = this.bufferSize, \n        halfSize    = bufferSize >>> 1, \n        nm1         = bufferSize - 1, \n        i = 1, r = 0, h;\n\n    this.reverseTable[0] = 0;\n\n    do {\n      r += halfSize;\n      \n      this.reverseTable[i] = r;\n      this.reverseTable[r] = i;\n\n      i++;\n\n      h = halfSize << 1;\n      while (h = h >> 1, !((r ^= h) & h));\n\n      if (r >= i) { \n        this.reverseTable[i] = r;\n        this.reverseTable[r] = i;\n\n        this.reverseTable[nm1-i] = nm1-r;\n        this.reverseTable[nm1-r] = nm1-i;\n      }\n      i++;\n    } while (i < halfSize);\n\n    this.reverseTable[nm1] = nm1;\n  };\n\n  this.generateReverseTable();\n}\n\n\n// Ordering of output:\n//\n// trans[0]     = re[0] (==zero frequency, purely real)\n// trans[1]     = re[1]\n//             ...\n// trans[n/2-1] = re[n/2-1]\n// trans[n/2]   = re[n/2]    (==nyquist frequency, purely real)\n//\n// trans[n/2+1] = im[n/2-1]\n// trans[n/2+2] = im[n/2-2]\n//             ...\n// trans[n-1]   = im[1] \n\nRFFT.prototype.forward = function(buffer) {\n  var n         = this.bufferSize, \n      spectrum  = this.spectrum,\n      x         = this.trans, \n      TWO_PI    = 2*Math.PI,\n      sqrt      = Math.sqrt,\n      i         = n >>> 1,\n      bSi       = 2 / n,\n      n2, n4, n8, nn, \n      t1, t2, t3, t4, \n      i1, i2, i3, i4, i5, i6, i7, i8, \n      st1, cc1, ss1, cc3, ss3,\n      e, \n      a,\n      rval, ival, mag; \n\n  this.reverseBinPermute(x, buffer);\n\n  /*\n  var reverseTable = this.reverseTable;\n\n  for (var k = 0, len = reverseTable.length; k < len; k++) {\n    x[k] = buffer[reverseTable[k]];\n  }\n  */\n\n  for (var ix = 0, id = 4; ix < n; id *= 4) {\n    for (var i0 = ix; i0 < n; i0 += id) {\n      //sumdiff(x[i0], x[i0+1]); // {a, b}  <--| {a+b, a-b}\n      st1 = x[i0] - x[i0+1];\n      x[i0] += x[i0+1];\n      x[i0+1] = st1;\n    } \n    ix = 2*(id-1);\n  }\n\n  n2 = 2;\n  nn = n >>> 1;\n\n  while((nn = nn >>> 1)) {\n    ix = 0;\n    n2 = n2 << 1;\n    id = n2 << 1;\n    n4 = n2 >>> 2;\n    n8 = n2 >>> 3;\n    do {\n      if(n4 !== 1) {\n        for(i0 = ix; i0 < n; i0 += id) {\n          i1 = i0;\n          i2 = i1 + n4;\n          i3 = i2 + n4;\n          i4 = i3 + n4;\n     \n          //diffsum3_r(x[i3], x[i4], t1); // {a, b, s} <--| {a, b-a, a+b}\n          t1 = x[i3] + x[i4];\n          x[i4] -= x[i3];\n          //sumdiff3(x[i1], t1, x[i3]);   // {a, b, d} <--| {a+b, b, a-b}\n          x[i3] = x[i1] - t1; \n          x[i1] += t1;\n     \n          i1 += n8;\n          i2 += n8;\n          i3 += n8;\n          i4 += n8;\n         \n          //sumdiff(x[i3], x[i4], t1, t2); // {s, d}  <--| {a+b, a-b}\n          t1 = x[i3] + x[i4];\n          t2 = x[i3] - x[i4];\n         \n          t1 = -t1 * Math.SQRT1_2;\n          t2 *= Math.SQRT1_2;\n     \n          // sumdiff(t1, x[i2], x[i4], x[i3]); // {s, d}  <--| {a+b, a-b}\n          st1 = x[i2];\n          x[i4] = t1 + st1; \n          x[i3] = t1 - st1;\n          \n          //sumdiff3(x[i1], t2, x[i2]); // {a, b, d} <--| {a+b, b, a-b}\n          x[i2] = x[i1] - t2;\n          x[i1] += t2;\n        }\n      } else {\n        for(i0 = ix; i0 < n; i0 += id) {\n          i1 = i0;\n          i2 = i1 + n4;\n          i3 = i2 + n4;\n          i4 = i3 + n4;\n     \n          //diffsum3_r(x[i3], x[i4], t1); // {a, b, s} <--| {a, b-a, a+b}\n          t1 = x[i3] + x[i4]; \n          x[i4] -= x[i3];\n          \n          //sumdiff3(x[i1], t1, x[i3]);   // {a, b, d} <--| {a+b, b, a-b}\n          x[i3] = x[i1] - t1; \n          x[i1] += t1;\n        }\n      }\n   \n      ix = (id << 1) - n2;\n      id = id << 2;\n    } while (ix < n);\n \n    e = TWO_PI / n2;\n\n    for (var j = 1; j < n8; j++) {\n      a = j * e;\n      ss1 = Math.sin(a);\n      cc1 = Math.cos(a);\n\n      //ss3 = sin(3*a); cc3 = cos(3*a);\n      cc3 = 4*cc1*(cc1*cc1-0.75);\n      ss3 = 4*ss1*(0.75-ss1*ss1);\n   \n      ix = 0; id = n2 << 1;\n      do {\n        for (i0 = ix; i0 < n; i0 += id) {\n          i1 = i0 + j;\n          i2 = i1 + n4;\n          i3 = i2 + n4;\n          i4 = i3 + n4;\n       \n          i5 = i0 + n4 - j;\n          i6 = i5 + n4;\n          i7 = i6 + n4;\n          i8 = i7 + n4;\n       \n          //cmult(c, s, x, y, &u, &v)\n          //cmult(cc1, ss1, x[i7], x[i3], t2, t1); // {u,v} <--| {x*c-y*s, x*s+y*c}\n          t2 = x[i7]*cc1 - x[i3]*ss1; \n          t1 = x[i7]*ss1 + x[i3]*cc1;\n          \n          //cmult(cc3, ss3, x[i8], x[i4], t4, t3);\n          t4 = x[i8]*cc3 - x[i4]*ss3; \n          t3 = x[i8]*ss3 + x[i4]*cc3;\n       \n          //sumdiff(t2, t4);   // {a, b} <--| {a+b, a-b}\n          st1 = t2 - t4;\n          t2 += t4;\n          t4 = st1;\n          \n          //sumdiff(t2, x[i6], x[i8], x[i3]); // {s, d}  <--| {a+b, a-b}\n          //st1 = x[i6]; x[i8] = t2 + st1; x[i3] = t2 - st1;\n          x[i8] = t2 + x[i6]; \n          x[i3] = t2 - x[i6];\n         \n          //sumdiff_r(t1, t3); // {a, b} <--| {a+b, b-a}\n          st1 = t3 - t1;\n          t1 += t3;\n          t3 = st1;\n          \n          //sumdiff(t3, x[i2], x[i4], x[i7]); // {s, d}  <--| {a+b, a-b}\n          //st1 = x[i2]; x[i4] = t3 + st1; x[i7] = t3 - st1;\n          x[i4] = t3 + x[i2]; \n          x[i7] = t3 - x[i2];\n         \n          //sumdiff3(x[i1], t1, x[i6]);   // {a, b, d} <--| {a+b, b, a-b}\n          x[i6] = x[i1] - t1; \n          x[i1] += t1;\n          \n          //diffsum3_r(t4, x[i5], x[i2]); // {a, b, s} <--| {a, b-a, a+b}\n          x[i2] = t4 + x[i5]; \n          x[i5] -= t4;\n        }\n     \n        ix = (id << 1) - n2;\n        id = id << 2;\n   \n      } while (ix < n);\n    }\n  }\n\n  while (--i) {\n    rval = x[i];\n    ival = x[n-i-1];\n    mag = bSi * sqrt(rval * rval + ival * ival);\n\n    if (mag > this.peak) {\n      this.peakBand = i;\n      this.peak = mag;\n    }\n\n    spectrum[i] = mag;\n  }\n\n  spectrum[0] = bSi * x[0];\n\n  return spectrum;\n};\n\nfunction Sampler(file, bufferSize, sampleRate, playStart, playEnd, loopStart, loopEnd, loopMode) {\n  this.file = file;\n  this.bufferSize = bufferSize;\n  this.sampleRate = sampleRate;\n  this.playStart  = playStart || 0; // 0%\n  this.playEnd    = playEnd   || 1; // 100%\n  this.loopStart  = loopStart || 0;\n  this.loopEnd    = loopEnd   || 1;\n  this.loopMode   = loopMode  || DSP.OFF;\n  this.loaded     = false;\n  this.samples    = [];\n  this.signal     = new Float32Array(bufferSize);\n  this.frameCount = 0;\n  this.envelope   = null;\n  this.amplitude  = 1;\n  this.rootFrequency = 110; // A2 110\n  this.frequency  = 550;\n  this.step       = this.frequency / this.rootFrequency;\n  this.duration   = 0;\n  this.samplesProcessed = 0;\n  this.playhead   = 0;\n \n  var audio = /* new Audio();*/ document.createElement("AUDIO");\n  var self = this;\n \n  this.loadSamples = function(event) {\n    var buffer = DSP.getChannel(DSP.MIX, event.frameBuffer);\n    for ( var i = 0; i < buffer.length; i++) {\n      self.samples.push(buffer[i]);\n    }\n  };\n \n  this.loadComplete = function() {\n    // convert flexible js array into a fast typed array\n    self.samples = new Float32Array(self.samples);\n    self.loaded = true;\n  };\n \n  this.loadMetaData = function() {\n    self.duration = audio.duration;\n  };\n \n  audio.addEventListener("MozAudioAvailable", this.loadSamples, false);\n  audio.addEventListener("loadedmetadata", this.loadMetaData, false);\n  audio.addEventListener("ended", this.loadComplete, false);\n  audio.muted = true;\n  audio.src = file;\n  audio.play();\n}\n\nSampler.prototype.applyEnvelope = function() {\n  this.envelope.process(this.signal);\n  return this.signal;\n};\n\nSampler.prototype.generate = function() {\n  var frameOffset = this.frameCount * this.bufferSize;\n \n  var loopWidth = this.playEnd * this.samples.length - this.playStart * this.samples.length;\n  var playStartSamples = this.playStart * this.samples.length; // ie 0.5 -> 50% of the length\n  var playEndSamples = this.playEnd * this.samples.length; // ie 0.5 -> 50% of the length\n  var offset;\n\n  for ( var i = 0; i < this.bufferSize; i++ ) {\n    switch (this.loopMode) {\n      case DSP.OFF:\n        this.playhead = Math.round(this.samplesProcessed * this.step + playStartSamples);\n        if (this.playhead < (this.playEnd * this.samples.length) ) {\n          this.signal[i] = this.samples[this.playhead] * this.amplitude;\n        } else {\n          this.signal[i] = 0;\n        }\n        break;\n     \n      case DSP.FW:\n        this.playhead = Math.round((this.samplesProcessed * this.step) % loopWidth + playStartSamples);\n        if (this.playhead < (this.playEnd * this.samples.length) ) {\n          this.signal[i] = this.samples[this.playhead] * this.amplitude;\n        }\n        break;\n       \n      case DSP.BW:\n        this.playhead = playEndSamples - Math.round((this.samplesProcessed * this.step) % loopWidth);\n        if (this.playhead < (this.playEnd * this.samples.length) ) {\n          this.signal[i] = this.samples[this.playhead] * this.amplitude;\n        }\n        break;\n       \n      case DSP.FWBW:\n        if ( Math.floor(this.samplesProcessed * this.step / loopWidth) % 2 === 0 ) {\n          this.playhead = Math.round((this.samplesProcessed * this.step) % loopWidth + playStartSamples);\n        } else {\n          this.playhead = playEndSamples - Math.round((this.samplesProcessed * this.step) % loopWidth);\n        }  \n        if (this.playhead < (this.playEnd * this.samples.length) ) {\n          this.signal[i] = this.samples[this.playhead] * this.amplitude;\n        }\n        break;\n    }\n    this.samplesProcessed++;\n  }\n\n  this.frameCount++;\n\n  return this.signal;\n};\n\nSampler.prototype.setFreq = function(frequency) {\n    var totalProcessed = this.samplesProcessed * this.step;\n    this.frequency = frequency;\n    this.step = this.frequency / this.rootFrequency;\n    this.samplesProcessed = Math.round(totalProcessed/this.step);\n};\n\nSampler.prototype.reset = function() {\n  this.samplesProcessed = 0;\n  this.playhead = 0;\n};\n\n/**\n * Oscillator class for generating and modifying signals\n *\n * @param {Number} type       A waveform constant (eg. DSP.SINE)\n * @param {Number} frequency  Initial frequency of the signal\n * @param {Number} amplitude  Initial amplitude of the signal\n * @param {Number} bufferSize Size of the sample buffer to generate\n * @param {Number} sampleRate The sample rate of the signal\n *\n * @contructor\n */\nfunction Oscillator(type, frequency, amplitude, bufferSize, sampleRate) {\n  this.frequency  = frequency;\n  this.amplitude  = amplitude;\n  this.bufferSize = bufferSize;\n  this.sampleRate = sampleRate;\n  //this.pulseWidth = pulseWidth;\n  this.frameCount = 0;\n \n  this.waveTableLength = 2048;\n\n  this.cyclesPerSample = frequency / sampleRate;\n\n  this.signal = new Float32Array(bufferSize);\n  this.envelope = null;\n\n  switch(parseInt(type, 10)) {\n    case DSP.TRIANGLE:\n      this.func = Oscillator.Triangle;\n      break;\n\n    case DSP.SAW:\n      this.func = Oscillator.Saw;\n      break;\n\n    case DSP.SQUARE:\n      this.func = Oscillator.Square;\n      break;\n\n    default:\n    case DSP.SINE:\n      this.func = Oscillator.Sine;\n      break;\n  }\n\n  this.generateWaveTable = function() {\n    Oscillator.waveTable[this.func] = new Float32Array(2048);\n    var waveTableTime = this.waveTableLength / this.sampleRate;\n    var waveTableHz = 1 / waveTableTime;\n\n    for (var i = 0; i < this.waveTableLength; i++) {\n      Oscillator.waveTable[this.func][i] = this.func(i * waveTableHz/this.sampleRate);\n    }\n  };\n\n  if ( typeof Oscillator.waveTable === \'undefined\' ) {\n    Oscillator.waveTable = {};\n  }\n\n  if ( typeof Oscillator.waveTable[this.func] === \'undefined\' ) {\n    this.generateWaveTable();\n  }\n \n  this.waveTable = Oscillator.waveTable[this.func];\n}\n\n/**\n * Set the amplitude of the signal\n *\n * @param {Number} amplitude The amplitude of the signal (between 0 and 1)\n */\nOscillator.prototype.setAmp = function(amplitude) {\n  if (amplitude >= 0 && amplitude <= 1) {\n    this.amplitude = amplitude;\n  } else {\n    throw "Amplitude out of range (0..1).";\n  }\n};\n  \n/**\n * Set the frequency of the signal\n *\n * @param {Number} frequency The frequency of the signal\n */  \nOscillator.prototype.setFreq = function(frequency) {\n  this.frequency = frequency;\n  this.cyclesPerSample = frequency / this.sampleRate;\n};\n     \n// Add an oscillator\nOscillator.prototype.add = function(oscillator) {\n  for ( var i = 0; i < this.bufferSize; i++ ) {\n    //this.signal[i] += oscillator.valueAt(i);\n    this.signal[i] += oscillator.signal[i];\n  }\n \n  return this.signal;\n};\n     \n// Add a signal to the current generated osc signal\nOscillator.prototype.addSignal = function(signal) {\n  for ( var i = 0; i < signal.length; i++ ) {\n    if ( i >= this.bufferSize ) {\n      break;\n    }\n    this.signal[i] += signal[i];\n   \n    /*\n    // Constrain amplitude\n    if ( this.signal[i] > 1 ) {\n      this.signal[i] = 1;\n    } else if ( this.signal[i] < -1 ) {\n      this.signal[i] = -1;\n    }\n    */\n  }\n  return this.signal;\n};\n     \n// Add an envelope to the oscillator\nOscillator.prototype.addEnvelope = function(envelope) {\n  this.envelope = envelope;\n};\n\nOscillator.prototype.applyEnvelope = function() {\n  this.envelope.process(this.signal);\n};\n     \nOscillator.prototype.valueAt = function(offset) {\n  return this.waveTable[offset % this.waveTableLength];\n};\n     \nOscillator.prototype.generate = function() {\n  var frameOffset = this.frameCount * this.bufferSize;\n  var step = this.waveTableLength * this.frequency / this.sampleRate;\n  var offset;\n\n  for ( var i = 0; i < this.bufferSize; i++ ) {\n    //var step = (frameOffset + i) * this.cyclesPerSample % 1;\n    //this.signal[i] = this.func(step) * this.amplitude;\n    //this.signal[i] = this.valueAt(Math.round((frameOffset + i) * step)) * this.amplitude;\n    offset = Math.round((frameOffset + i) * step);\n    this.signal[i] = this.waveTable[offset % this.waveTableLength] * this.amplitude;\n  }\n\n  this.frameCount++;\n\n  return this.signal;\n};\n\nOscillator.Sine = function(step) {\n  return Math.sin(DSP.TWO_PI * step);\n};\n\nOscillator.Square = function(step) {\n  return step < 0.5 ? 1 : -1;\n};\n\nOscillator.Saw = function(step) {\n  return 2 * (step - Math.round(step));\n};\n\nOscillator.Triangle = function(step) {\n  return 1 - 4 * Math.abs(Math.round(step) - step);\n};\n\nOscillator.Pulse = function(step) {\n  // stub\n};\n \nfunction ADSR(attackLength, decayLength, sustainLevel, sustainLength, releaseLength, sampleRate) {\n  this.sampleRate = sampleRate;\n  // Length in seconds\n  this.attackLength  = attackLength;\n  this.decayLength   = decayLength;\n  this.sustainLevel  = sustainLevel;\n  this.sustainLength = sustainLength;\n  this.releaseLength = releaseLength;\n  this.sampleRate    = sampleRate;\n \n  // Length in samples\n  this.attackSamples  = attackLength  * sampleRate;\n  this.decaySamples   = decayLength   * sampleRate;\n  this.sustainSamples = sustainLength * sampleRate;\n  this.releaseSamples = releaseLength * sampleRate;\n \n  // Updates the envelope sample positions\n  this.update = function() {\n    this.attack         =                this.attackSamples;\n    this.decay          = this.attack  + this.decaySamples;\n    this.sustain        = this.decay   + this.sustainSamples;\n    this.release        = this.sustain + this.releaseSamples;\n  };\n \n  this.update();\n \n  this.samplesProcessed = 0;\n}\n\nADSR.prototype.noteOn = function() {\n  this.samplesProcessed = 0;\n  this.sustainSamples = this.sustainLength * this.sampleRate;\n  this.update();\n};\n\n// Send a note off when using a sustain of infinity to let the envelope enter the release phase\nADSR.prototype.noteOff = function() {\n  this.sustainSamples = this.samplesProcessed - this.decaySamples;\n  this.update();\n};\n\nADSR.prototype.processSample = function(sample) {\n  var amplitude = 0;\n\n  if ( this.samplesProcessed <= this.attack ) {\n    amplitude = 0 + (1 - 0) * ((this.samplesProcessed - 0) / (this.attack - 0));\n  } else if ( this.samplesProcessed > this.attack && this.samplesProcessed <= this.decay ) {\n    amplitude = 1 + (this.sustainLevel - 1) * ((this.samplesProcessed - this.attack) / (this.decay - this.attack));\n  } else if ( this.samplesProcessed > this.decay && this.samplesProcessed <= this.sustain ) {\n    amplitude = this.sustainLevel;\n  } else if ( this.samplesProcessed > this.sustain && this.samplesProcessed <= this.release ) {\n    amplitude = this.sustainLevel + (0 - this.sustainLevel) * ((this.samplesProcessed - this.sustain) / (this.release - this.sustain));\n  }\n \n  return sample * amplitude;\n};\n\nADSR.prototype.value = function() {\n  var amplitude = 0;\n\n  if ( this.samplesProcessed <= this.attack ) {\n    amplitude = 0 + (1 - 0) * ((this.samplesProcessed - 0) / (this.attack - 0));\n  } else if ( this.samplesProcessed > this.attack && this.samplesProcessed <= this.decay ) {\n    amplitude = 1 + (this.sustainLevel - 1) * ((this.samplesProcessed - this.attack) / (this.decay - this.attack));\n  } else if ( this.samplesProcessed > this.decay && this.samplesProcessed <= this.sustain ) {\n    amplitude = this.sustainLevel;\n  } else if ( this.samplesProcessed > this.sustain && this.samplesProcessed <= this.release ) {\n    amplitude = this.sustainLevel + (0 - this.sustainLevel) * ((this.samplesProcessed - this.sustain) / (this.release - this.sustain));\n  }\n \n  return amplitude;\n};\n     \nADSR.prototype.process = function(buffer) {\n  for ( var i = 0; i < buffer.length; i++ ) {\n    buffer[i] *= this.value();\n\n    this.samplesProcessed++;\n  }\n \n  return buffer;\n};\n     \n     \nADSR.prototype.isActive = function() {\n  if ( this.samplesProcessed > this.release || this.samplesProcessed === -1 ) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nADSR.prototype.disable = function() {\n  this.samplesProcessed = -1;\n};\n \nfunction IIRFilter(type, cutoff, resonance, sampleRate) {\n  this.sampleRate = sampleRate;\n\n  switch(type) {\n    case DSP.LOWPASS:\n    case DSP.LP12:\n      this.func = new IIRFilter.LP12(cutoff, resonance, sampleRate);\n      break;\n  }\n}\n\nIIRFilter.prototype.__defineGetter__(\'cutoff\',\n  function() {\n    return this.func.cutoff;\n  }\n);\n\nIIRFilter.prototype.__defineGetter__(\'resonance\',\n  function() {\n    return this.func.resonance;\n  }\n);\n\nIIRFilter.prototype.set = function(cutoff, resonance) {\n  this.func.calcCoeff(cutoff, resonance);\n};\n\nIIRFilter.prototype.process = function(buffer) {\n  this.func.process(buffer);\n};\n\n// Add an envelope to the filter\nIIRFilter.prototype.addEnvelope = function(envelope) {\n  if ( envelope instanceof ADSR ) {\n    this.func.addEnvelope(envelope);\n  } else {\n    throw "Not an envelope.";\n  }\n};\n\nIIRFilter.LP12 = function(cutoff, resonance, sampleRate) {\n  this.sampleRate = sampleRate;\n  this.vibraPos   = 0;\n  this.vibraSpeed = 0;\n  this.envelope = false;\n \n  this.calcCoeff = function(cutoff, resonance) {\n    this.w = 2.0 * Math.PI * cutoff / this.sampleRate;\n    this.q = 1.0 - this.w / (2.0 * (resonance + 0.5 / (1.0 + this.w)) + this.w - 2.0);\n    this.r = this.q * this.q;\n    this.c = this.r + 1.0 - 2.0 * Math.cos(this.w) * this.q;\n   \n    this.cutoff = cutoff;\n    this.resonance = resonance;\n  };\n\n  this.calcCoeff(cutoff, resonance);\n\n  this.process = function(buffer) {\n    for ( var i = 0; i < buffer.length; i++ ) {\n      this.vibraSpeed += (buffer[i] - this.vibraPos) * this.c;\n      this.vibraPos   += this.vibraSpeed;\n      this.vibraSpeed *= this.r;\n   \n      /*\n      var temp = this.vibraPos;\n     \n      if ( temp > 1.0 ) {\n        temp = 1.0;\n      } else if ( temp < -1.0 ) {\n        temp = -1.0;\n      } else if ( temp != temp ) {\n        temp = 1;\n      }\n     \n      buffer[i] = temp;\n      */\n\n      if (this.envelope) {\n        buffer[i] = (buffer[i] * (1 - this.envelope.value())) + (this.vibraPos * this.envelope.value());\n        this.envelope.samplesProcessed++;\n      } else {\n        buffer[i] = this.vibraPos;\n      }\n    }\n  };\n}; \n\nIIRFilter.LP12.prototype.addEnvelope = function(envelope) {\n  this.envelope = envelope;\n};\n\nfunction IIRFilter2(type, cutoff, resonance, sampleRate) {\n  this.type = type;\n  this.cutoff = cutoff;\n  this.resonance = resonance;\n  this.sampleRate = sampleRate;\n\n  this.f = Float32Array(4);\n  this.f[0] = 0.0; // lp\n  this.f[1] = 0.0; // hp\n  this.f[2] = 0.0; // bp\n  this.f[3] = 0.0; // br \n \n  this.calcCoeff = function(cutoff, resonance) {\n    this.freq = 2 * Math.sin(Math.PI * Math.min(0.25, cutoff/(this.sampleRate*2)));  \n    this.damp = Math.min(2 * (1 - Math.pow(resonance, 0.25)), Math.min(2, 2/this.freq - this.freq * 0.5));\n  };\n\n  this.calcCoeff(cutoff, resonance);\n}\n\nIIRFilter2.prototype.process = function(buffer) {\n  var input, output;\n  var f = this.f;\n\n  for ( var i = 0; i < buffer.length; i++ ) {\n    input = buffer[i];\n\n    // first pass\n    f[3] = input - this.damp * f[2];\n    f[0] = f[0] + this.freq * f[2];\n    f[1] = f[3] - f[0];\n    f[2] = this.freq * f[1] + f[2];\n    output = 0.5 * f[this.type];\n\n    // second pass\n    f[3] = input - this.damp * f[2];\n    f[0] = f[0] + this.freq * f[2];\n    f[1] = f[3] - f[0];\n    f[2] = this.freq * f[1] + f[2];\n    output += 0.5 * f[this.type];\n\n    if (this.envelope) {\n      buffer[i] = (buffer[i] * (1 - this.envelope.value())) + (output * this.envelope.value());\n      this.envelope.samplesProcessed++;\n    } else {\n      buffer[i] = output;\n    }\n  }\n};\n\nIIRFilter2.prototype.addEnvelope = function(envelope) {\n  if ( envelope instanceof ADSR ) {\n    this.envelope = envelope;\n  } else {\n    throw "This is not an envelope.";\n  }\n};\n\nIIRFilter2.prototype.set = function(cutoff, resonance) {\n  this.calcCoeff(cutoff, resonance);\n};\n\n\n\nfunction WindowFunction(type, alpha) {\n  this.alpha = alpha;\n \n  switch(type) {\n    case DSP.BARTLETT:\n      this.func = WindowFunction.Bartlett;\n      break;\n     \n    case DSP.BARTLETTHANN:\n      this.func = WindowFunction.BartlettHann;\n      break;\n     \n    case DSP.BLACKMAN:\n      this.func = WindowFunction.Blackman;\n      this.alpha = this.alpha || 0.16;\n      break;\n   \n    case DSP.COSINE:\n      this.func = WindowFunction.Cosine;\n      break;\n     \n    case DSP.GAUSS:\n      this.func = WindowFunction.Gauss;\n      this.alpha = this.alpha || 0.25;\n      break;\n     \n    case DSP.HAMMING:\n      this.func = WindowFunction.Hamming;\n      break;\n     \n    case DSP.HANN:\n      this.func = WindowFunction.Hann;\n      break;\n   \n    case DSP.LANCZOS:\n      this.func = WindowFunction.Lanczoz;\n      break;\n     \n    case DSP.RECTANGULAR:\n      this.func = WindowFunction.Rectangular;\n      break;\n     \n    case DSP.TRIANGULAR:\n      this.func = WindowFunction.Triangular;\n      break;\n  }\n}\n\nWindowFunction.prototype.process = function(buffer) {\n  var length = buffer.length;\n  for ( var i = 0; i < length; i++ ) {\n    buffer[i] *= this.func(length, i, this.alpha);\n  }\n  return buffer;\n};\n\nWindowFunction.Bartlett = function(length, index) {\n  return 2 / (length - 1) * ((length - 1) / 2 - Math.abs(index - (length - 1) / 2));\n};\n\nWindowFunction.BartlettHann = function(length, index) {\n  return 0.62 - 0.48 * Math.abs(index / (length - 1) - 0.5) - 0.38 * Math.cos(DSP.TWO_PI * index / (length - 1));\n};\n\nWindowFunction.Blackman = function(length, index, alpha) {\n  var a0 = (1 - alpha) / 2;\n  var a1 = 0.5;\n  var a2 = alpha / 2;\n\n  return a0 - a1 * Math.cos(DSP.TWO_PI * index / (length - 1)) + a2 * Math.cos(4 * Math.PI * index / (length - 1));\n};\n\nWindowFunction.Cosine = function(length, index) {\n  return Math.cos(Math.PI * index / (length - 1) - Math.PI / 2);\n};\n\nWindowFunction.Gauss = function(length, index, alpha) {\n  return Math.pow(Math.E, -0.5 * Math.pow((index - (length - 1) / 2) / (alpha * (length - 1) / 2), 2));\n};\n\nWindowFunction.Hamming = function(length, index) {\n  return 0.54 - 0.46 * Math.cos(DSP.TWO_PI * index / (length - 1));\n};\n\nWindowFunction.Hann = function(length, index) {\n  return 0.5 * (1 - Math.cos(DSP.TWO_PI * index / (length - 1)));\n};\n\nWindowFunction.Lanczos = function(length, index) {\n  var x = 2 * index / (length - 1) - 1;\n  return Math.sin(Math.PI * x) / (Math.PI * x);\n};\n\nWindowFunction.Rectangular = function(length, index) {\n  return 1;\n};\n\nWindowFunction.Triangular = function(length, index) {\n  return 2 / length * (length / 2 - Math.abs(index - (length - 1) / 2));\n};\n\nfunction sinh (arg) {\n  // Returns the hyperbolic sine of the number, defined as (exp(number) - exp(-number))/2 \n  //\n  // version: 1004.2314\n  // discuss at: http://phpjs.org/functions/sinh    // +   original by: Onno Marsman\n  // *     example 1: sinh(-0.9834330348825909);\n  // *     returns 1: -1.1497971402636502\n  return (Math.exp(arg) - Math.exp(-arg))/2;\n}\n\n/* \n *  Biquad filter\n * \n *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.\n *  Copyright 2010 Ricard Marxer. All rights reserved.\n *\n */\n// Implementation based on:\n// http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt\nfunction Biquad(type, sampleRate) {\n  this.Fs = sampleRate;\n  this.type = type;  // type of the filter\n  this.parameterType = DSP.Q; // type of the parameter\n\n  this.x_1_l = 0;\n  this.x_2_l = 0;\n  this.y_1_l = 0;\n  this.y_2_l = 0;\n\n  this.x_1_r = 0;\n  this.x_2_r = 0;\n  this.y_1_r = 0;\n  this.y_2_r = 0;\n\n  this.b0 = 1;\n  this.a0 = 1;\n\n  this.b1 = 0;\n  this.a1 = 0;\n\n  this.b2 = 0;\n  this.a2 = 0;\n\n  this.b0a0 = this.b0 / this.a0;\n  this.b1a0 = this.b1 / this.a0;\n  this.b2a0 = this.b2 / this.a0;\n  this.a1a0 = this.a1 / this.a0;\n  this.a2a0 = this.a2 / this.a0;\n\n  this.f0 = 3000;   // "wherever it\'s happenin\', man."  Center Frequency or\n                    // Corner Frequency, or shelf midpoint frequency, depending\n                    // on which filter type.  The "significant frequency".\n\n  this.dBgain = 12; // used only for peaking and shelving filters\n\n  this.Q = 1;       // the EE kind of definition, except for peakingEQ in which A*Q is\n                    // the classic EE Q.  That adjustment in definition was made so that\n                    // a boost of N dB followed by a cut of N dB for identical Q and\n                    // f0/Fs results in a precisely flat unity gain filter or "wire".\n\n  this.BW = -3;     // the bandwidth in octaves (between -3 dB frequencies for BPF\n                    // and notch or between midpoint (dBgain/2) gain frequencies for\n                    // peaking EQ\n\n  this.S = 1;       // a "shelf slope" parameter (for shelving EQ only).  When S = 1,\n                    // the shelf slope is as steep as it can be and remain monotonically\n                    // increasing or decreasing gain with frequency.  The shelf slope, in\n                    // dB/octave, remains proportional to S for all other values for a\n                    // fixed f0/Fs and dBgain.\n\n  this.coefficients = function() {\n    var b = [this.b0, this.b1, this.b2];\n    var a = [this.a0, this.a1, this.a2];\n    return {b: b, a:a};\n  };\n\n  this.setFilterType = function(type) {\n    this.type = type;\n    this.recalculateCoefficients();\n  };\n\n  this.setSampleRate = function(rate) {\n    this.Fs = rate;\n    this.recalculateCoefficients();\n  };\n\n  this.setQ = function(q) {\n    this.parameterType = DSP.Q;\n    this.Q = Math.max(Math.min(q, 115.0), 0.001);\n    this.recalculateCoefficients();\n  };\n\n  this.setBW = function(bw) {\n    this.parameterType = DSP.BW;\n    this.BW = bw;\n    this.recalculateCoefficients();\n  };\n\n  this.setS = function(s) {\n    this.parameterType = DSP.S;\n    this.S = Math.max(Math.min(s, 5.0), 0.0001);\n    this.recalculateCoefficients();\n  };\n\n  this.setF0 = function(freq) {\n    this.f0 = freq;\n    this.recalculateCoefficients();\n  }; \n \n  this.setDbGain = function(g) {\n    this.dBgain = g;\n    this.recalculateCoefficients();\n  };\n\n  this.recalculateCoefficients = function() {\n    var A;\n    if (type === DSP.PEAKING_EQ || type === DSP.LOW_SHELF || type === DSP.HIGH_SHELF ) {\n      A = Math.pow(10, (this.dBgain/40));  // for peaking and shelving EQ filters only\n    } else {\n      A  = Math.sqrt( Math.pow(10, (this.dBgain/20)) );   \n    }\n\n    var w0 = DSP.TWO_PI * this.f0 / this.Fs;\n\n    var cosw0 = Math.cos(w0);\n    var sinw0 = Math.sin(w0);\n\n    var alpha = 0;\n   \n    switch (this.parameterType) {\n      case DSP.Q:\n        alpha = sinw0/(2*this.Q);\n        break;\n           \n      case DSP.BW:\n        alpha = sinw0 * sinh( Math.LN2/2 * this.BW * w0/sinw0 );\n        break;\n\n      case DSP.S:\n        alpha = sinw0/2 * Math.sqrt( (A + 1/A)*(1/this.S - 1) + 2 );\n        break;\n    }\n\n    /**\n        FYI: The relationship between bandwidth and Q is\n             1/Q = 2*sinh(ln(2)/2*BW*w0/sin(w0))     (digital filter w BLT)\n        or   1/Q = 2*sinh(ln(2)/2*BW)             (analog filter prototype)\n\n        The relationship between shelf slope and Q is\n             1/Q = sqrt((A + 1/A)*(1/S - 1) + 2)\n    */\n\n    var coeff;\n\n    switch (this.type) {\n      case DSP.LPF:       // H(s) = 1 / (s^2 + s/Q + 1)\n        this.b0 =  (1 - cosw0)/2;\n        this.b1 =   1 - cosw0;\n        this.b2 =  (1 - cosw0)/2;\n        this.a0 =   1 + alpha;\n        this.a1 =  -2 * cosw0;\n        this.a2 =   1 - alpha;\n        break;\n\n      case DSP.HPF:       // H(s) = s^2 / (s^2 + s/Q + 1)\n        this.b0 =  (1 + cosw0)/2;\n        this.b1 = -(1 + cosw0);\n        this.b2 =  (1 + cosw0)/2;\n        this.a0 =   1 + alpha;\n        this.a1 =  -2 * cosw0;\n        this.a2 =   1 - alpha;\n        break;\n\n      case DSP.BPF_CONSTANT_SKIRT:       // H(s) = s / (s^2 + s/Q + 1)  (constant skirt gain, peak gain = Q)\n        this.b0 =   sinw0/2;\n        this.b1 =   0;\n        this.b2 =  -sinw0/2;\n        this.a0 =   1 + alpha;\n        this.a1 =  -2*cosw0;\n        this.a2 =   1 - alpha;\n        break;\n\n      case DSP.BPF_CONSTANT_PEAK:       // H(s) = (s/Q) / (s^2 + s/Q + 1)      (constant 0 dB peak gain)\n        this.b0 =   alpha;\n        this.b1 =   0;\n        this.b2 =  -alpha;\n        this.a0 =   1 + alpha;\n        this.a1 =  -2*cosw0;\n        this.a2 =   1 - alpha;\n        break;\n\n      case DSP.NOTCH:     // H(s) = (s^2 + 1) / (s^2 + s/Q + 1)\n        this.b0 =   1;\n        this.b1 =  -2*cosw0;\n        this.b2 =   1;\n        this.a0 =   1 + alpha;\n        this.a1 =  -2*cosw0;\n        this.a2 =   1 - alpha;\n        break;\n\n      case DSP.APF:       // H(s) = (s^2 - s/Q + 1) / (s^2 + s/Q + 1)\n        this.b0 =   1 - alpha;\n        this.b1 =  -2*cosw0;\n        this.b2 =   1 + alpha;\n        this.a0 =   1 + alpha;\n        this.a1 =  -2*cosw0;\n        this.a2 =   1 - alpha;\n        break;\n\n      case DSP.PEAKING_EQ:  // H(s) = (s^2 + s*(A/Q) + 1) / (s^2 + s/(A*Q) + 1)\n        this.b0 =   1 + alpha*A;\n        this.b1 =  -2*cosw0;\n        this.b2 =   1 - alpha*A;\n        this.a0 =   1 + alpha/A;\n        this.a1 =  -2*cosw0;\n        this.a2 =   1 - alpha/A;\n        break;\n\n      case DSP.LOW_SHELF:   // H(s) = A * (s^2 + (sqrt(A)/Q)*s + A)/(A*s^2 + (sqrt(A)/Q)*s + 1)\n        coeff = sinw0 * Math.sqrt( (A^2 + 1)*(1/this.S - 1) + 2*A );\n        this.b0 =    A*((A+1) - (A-1)*cosw0 + coeff);\n        this.b1 =  2*A*((A-1) - (A+1)*cosw0);\n        this.b2 =    A*((A+1) - (A-1)*cosw0 - coeff);\n        this.a0 =       (A+1) + (A-1)*cosw0 + coeff;\n        this.a1 =   -2*((A-1) + (A+1)*cosw0);\n        this.a2 =       (A+1) + (A-1)*cosw0 - coeff;\n        break;\n\n      case DSP.HIGH_SHELF:   // H(s) = A * (A*s^2 + (sqrt(A)/Q)*s + 1)/(s^2 + (sqrt(A)/Q)*s + A)\n        coeff = sinw0 * Math.sqrt( (A^2 + 1)*(1/this.S - 1) + 2*A );\n        this.b0 =    A*((A+1) + (A-1)*cosw0 + coeff);\n        this.b1 = -2*A*((A-1) + (A+1)*cosw0);\n        this.b2 =    A*((A+1) + (A-1)*cosw0 - coeff);\n        this.a0 =       (A+1) - (A-1)*cosw0 + coeff;\n        this.a1 =    2*((A-1) - (A+1)*cosw0);\n        this.a2 =       (A+1) - (A-1)*cosw0 - coeff;\n        break;\n    }\n   \n    this.b0a0 = this.b0/this.a0;\n    this.b1a0 = this.b1/this.a0;\n    this.b2a0 = this.b2/this.a0;\n    this.a1a0 = this.a1/this.a0;\n    this.a2a0 = this.a2/this.a0;\n  };\n\n  this.process = function(buffer) {\n      //y[n] = (b0/a0)*x[n] + (b1/a0)*x[n-1] + (b2/a0)*x[n-2]\n      //       - (a1/a0)*y[n-1] - (a2/a0)*y[n-2]\n\n      var len = buffer.length;\n      var output = new Float32Array(len);\n\n      for ( var i=0; i<buffer.length; i++ ) {\n        output[i] = this.b0a0*buffer[i] + this.b1a0*this.x_1_l + this.b2a0*this.x_2_l - this.a1a0*this.y_1_l - this.a2a0*this.y_2_l;\n        this.y_2_l = this.y_1_l;\n        this.y_1_l = output[i];\n        this.x_2_l = this.x_1_l;\n        this.x_1_l = buffer[i];\n      }\n\n      return output;\n  };\n\n  this.processStereo = function(buffer) {\n      //y[n] = (b0/a0)*x[n] + (b1/a0)*x[n-1] + (b2/a0)*x[n-2]\n      //       - (a1/a0)*y[n-1] - (a2/a0)*y[n-2]\n\n      var len = buffer.length;\n      var output = new Float32Array(len);\n     \n      for (var i = 0; i < len/2; i++) {\n        output[2*i] = this.b0a0*buffer[2*i] + this.b1a0*this.x_1_l + this.b2a0*this.x_2_l - this.a1a0*this.y_1_l - this.a2a0*this.y_2_l;\n        this.y_2_l = this.y_1_l;\n        this.y_1_l = output[2*i];\n        this.x_2_l = this.x_1_l;\n        this.x_1_l = buffer[2*i];\n\n        output[2*i+1] = this.b0a0*buffer[2*i+1] + this.b1a0*this.x_1_r + this.b2a0*this.x_2_r - this.a1a0*this.y_1_r - this.a2a0*this.y_2_r;\n        this.y_2_r = this.y_1_r;\n        this.y_1_r = output[2*i+1];\n        this.x_2_r = this.x_1_r;\n        this.x_1_r = buffer[2*i+1];\n      }\n\n      return output;\n  };\n}\n\n/* \n *  Magnitude to decibels\n * \n *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.\n *  Copyright 2010 Ricard Marxer. All rights reserved.\n *\n *  @buffer array of magnitudes to convert to decibels\n *\n *  @returns the array in decibels\n *\n */\nDSP.mag2db = function(buffer) {\n  var minDb = -120;\n  var minMag = Math.pow(10.0, minDb / 20.0);\n\n  var log = Math.log;\n  var max = Math.max;\n \n  var result = Float32Array(buffer.length);\n  for (var i=0; i<buffer.length; i++) {\n    result[i] = 20.0*log(max(buffer[i], minMag));\n  }\n\n  return result;\n};\n\n/* \n *  Frequency response\n * \n *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.\n *  Copyright 2010 Ricard Marxer. All rights reserved.\n *\n *  Calculates the frequency response at the given points.\n *\n *  @b b coefficients of the filter\n *  @a a coefficients of the filter\n *  @w w points (normally between -PI and PI) where to calculate the frequency response\n *\n *  @returns the frequency response in magnitude\n *\n */\nDSP.freqz = function(b, a, w) {\n  var i, j;\n\n  if (!w) {\n    w = Float32Array(200);\n    for (i=0;i<w.length; i++) {\n      w[i] = DSP.TWO_PI/w.length * i - Math.PI;\n    }\n  }\n\n  var result = Float32Array(w.length);\n \n  var sqrt = Math.sqrt;\n  var cos = Math.cos;\n  var sin = Math.sin;\n \n  for (i=0; i<w.length; i++) {\n    var numerator = {real:0.0, imag:0.0};\n    for (j=0; j<b.length; j++) {\n      numerator.real += b[j] * cos(-j*w[i]);\n      numerator.imag += b[j] * sin(-j*w[i]);\n    }\n\n    var denominator = {real:0.0, imag:0.0};\n    for (j=0; j<a.length; j++) {\n      denominator.real += a[j] * cos(-j*w[i]);\n      denominator.imag += a[j] * sin(-j*w[i]);\n    }\n \n    result[i] =  sqrt(numerator.real*numerator.real + numerator.imag*numerator.imag) / sqrt(denominator.real*denominator.real + denominator.imag*denominator.imag);\n  }\n\n  return result;\n};\n\n/* \n *  Graphical Equalizer\n *\n *  Implementation of a graphic equalizer with a configurable bands-per-octave\n *  and minimum and maximum frequencies\n * \n *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.\n *  Copyright 2010 Ricard Marxer. All rights reserved.\n *\n */\nfunction GraphicalEq(sampleRate) {\n  this.FS = sampleRate;\n  this.minFreq = 40.0;\n  this.maxFreq = 16000.0;\n\n  this.bandsPerOctave = 1.0;\n\n  this.filters = [];\n  this.freqzs = [];\n\n  this.calculateFreqzs = true;\n\n  this.recalculateFilters = function() {\n    var bandCount = Math.round(Math.log(this.maxFreq/this.minFreq) * this.bandsPerOctave/ Math.LN2);\n\n    this.filters = [];\n    for (var i=0; i<bandCount; i++) {\n      var freq = this.minFreq*(Math.pow(2, i/this.bandsPerOctave));\n      var newFilter = new Biquad(DSP.PEAKING_EQ, this.FS);\n      newFilter.setDbGain(0);\n      newFilter.setBW(1/this.bandsPerOctave);\n      newFilter.setF0(freq);\n      this.filters[i] = newFilter;\n      this.recalculateFreqz(i);\n    }\n  };\n\n  this.setMinimumFrequency = function(freq) {\n    this.minFreq = freq;\n    this.recalculateFilters();\n  };\n\n  this.setMaximumFrequency = function(freq) {\n    this.maxFreq = freq;\n    this.recalculateFilters();\n  };\n\n  this.setBandsPerOctave = function(bands) {\n    this.bandsPerOctave = bands;\n    this.recalculateFilters();\n  };\n\n  this.setBandGain = function(bandIndex, gain) {\n    if (bandIndex < 0 || bandIndex > (this.filters.length-1)) {\n      throw "The band index of the graphical equalizer is out of bounds.";\n    }\n\n    if (!gain) {\n      throw "A gain must be passed.";\n    }\n   \n    this.filters[bandIndex].setDbGain(gain);\n    this.recalculateFreqz(bandIndex);\n  };\n \n  this.recalculateFreqz = function(bandIndex) {\n    if (!this.calculateFreqzs) {\n      return;\n    }\n\n    if (bandIndex < 0 || bandIndex > (this.filters.length-1)) {\n      throw "The band index of the graphical equalizer is out of bounds. " + bandIndex + " is out of [" + 0 + ", " + this.filters.length-1 + "]";\n    }\n       \n    if (!this.w) {\n      this.w = Float32Array(400);\n      for (var i=0; i<this.w.length; i++) {\n         this.w[i] = Math.PI/this.w.length * i;\n      }\n    }\n   \n    var b = [this.filters[bandIndex].b0, this.filters[bandIndex].b1, this.filters[bandIndex].b2];\n    var a = [this.filters[bandIndex].a0, this.filters[bandIndex].a1, this.filters[bandIndex].a2];\n\n    this.freqzs[bandIndex] = DSP.mag2db(DSP.freqz(b, a, this.w));\n  };\n\n  this.process = function(buffer) {\n    var output = buffer;\n\n    for (var i = 0; i < this.filters.length; i++) {\n      output = this.filters[i].process(output);\n    }\n\n    return output;\n  };\n\n  this.processStereo = function(buffer) {\n    var output = buffer;\n\n    for (var i = 0; i < this.filters.length; i++) {\n      output = this.filters[i].processStereo(output);\n    }\n\n    return output;\n  };\n}\n\n/**\n * MultiDelay effect by Almer Thie (http://code.almeros.com).\n * Copyright 2010 Almer Thie. All rights reserved.\n * Example: http://code.almeros.com/code-examples/delay-firefox-audio-api/\n *\n * This is a delay that feeds it\'s own delayed signal back into its circular\n * buffer. Also known as a CombFilter.\n *\n * Compatible with interleaved stereo (or more channel) buffers and\n * non-interleaved mono buffers.\n *\n * @param {Number} maxDelayInSamplesSize Maximum possible delay in samples (size of circular buffer)\n * @param {Number} delayInSamples Initial delay in samples\n * @param {Number} masterVolume Initial master volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n * @param {Number} delayVolume Initial feedback delay volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n *\n * @constructor\n */\nfunction MultiDelay(maxDelayInSamplesSize, delayInSamples, masterVolume, delayVolume) {\n  this.delayBufferSamples   = new Float32Array(maxDelayInSamplesSize); // The maximum size of delay\n  this.delayInputPointer     = delayInSamples;\n  this.delayOutputPointer   = 0;\n \n  this.delayInSamples   = delayInSamples;\n  this.masterVolume     = masterVolume;\n  this.delayVolume     = delayVolume;\n}\n\n/**\n * Change the delay time in samples.\n *\n * @param {Number} delayInSamples Delay in samples\n */\nMultiDelay.prototype.setDelayInSamples = function (delayInSamples) {\n  this.delayInSamples = delayInSamples;\n \n  this.delayInputPointer = this.delayOutputPointer + delayInSamples;\n\n  if (this.delayInputPointer >= this.delayBufferSamples.length-1) {\n    this.delayInputPointer = this.delayInputPointer - this.delayBufferSamples.length; \n  }\n};\n\n/**\n * Change the master volume.\n *\n * @param {Number} masterVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\nMultiDelay.prototype.setMasterVolume = function(masterVolume) {\n  this.masterVolume = masterVolume;\n};\n\n/**\n * Change the delay feedback volume.\n *\n * @param {Number} delayVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\nMultiDelay.prototype.setDelayVolume = function(delayVolume) {\n  this.delayVolume = delayVolume;\n};\n\n/**\n * Process a given interleaved or mono non-interleaved float value Array and adds the delayed audio.\n *\n * @param {Array} samples Array containing Float values or a Float32Array\n *\n * @returns A new Float32Array interleaved or mono non-interleaved as was fed to this function.\n */\nMultiDelay.prototype.process = function(samples) {\n  // NB. Make a copy to put in the output samples to return.\n  var outputSamples = new Float32Array(samples.length);\n\n  for (var i=0; i<samples.length; i++) {\n    // delayBufferSamples could contain initial NULL\'s, return silence in that case\n    var delaySample = (this.delayBufferSamples[this.delayOutputPointer] === null ? 0.0 : this.delayBufferSamples[this.delayOutputPointer]);\n   \n    // Mix normal audio data with delayed audio\n    var sample = (delaySample * this.delayVolume) + samples[i];\n   \n    // Add audio data with the delay in the delay buffer\n    this.delayBufferSamples[this.delayInputPointer] = sample;\n   \n    // Return the audio with delay mix\n    outputSamples[i] = sample * this.masterVolume;\n   \n    // Manage circulair delay buffer pointers\n    this.delayInputPointer++;\n    if (this.delayInputPointer >= this.delayBufferSamples.length-1) {\n      this.delayInputPointer = 0;\n    }\n     \n    this.delayOutputPointer++;\n    if (this.delayOutputPointer >= this.delayBufferSamples.length-1) {\n      this.delayOutputPointer = 0; \n    } \n  }\n \n  return outputSamples;\n};\n\n/**\n * SingleDelay effect by Almer Thie (http://code.almeros.com).\n * Copyright 2010 Almer Thie. All rights reserved.\n * Example: See usage in Reverb class\n *\n * This is a delay that does NOT feeds it\'s own delayed signal back into its \n * circular buffer, neither does it return the original signal. Also known as\n * an AllPassFilter(?).\n *\n * Compatible with interleaved stereo (or more channel) buffers and\n * non-interleaved mono buffers.\n *\n * @param {Number} maxDelayInSamplesSize Maximum possible delay in samples (size of circular buffer)\n * @param {Number} delayInSamples Initial delay in samples\n * @param {Number} delayVolume Initial feedback delay volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n *\n * @constructor\n */\n\nfunction SingleDelay(maxDelayInSamplesSize, delayInSamples, delayVolume) {\n  this.delayBufferSamples = new Float32Array(maxDelayInSamplesSize); // The maximum size of delay\n  this.delayInputPointer  = delayInSamples;\n  this.delayOutputPointer = 0;\n \n  this.delayInSamples     = delayInSamples;\n  this.delayVolume        = delayVolume;\n}\n\n/**\n * Change the delay time in samples.\n *\n * @param {Number} delayInSamples Delay in samples\n */\nSingleDelay.prototype.setDelayInSamples = function(delayInSamples) {\n  this.delayInSamples = delayInSamples;\n  this.delayInputPointer = this.delayOutputPointer + delayInSamples;\n\n  if (this.delayInputPointer >= this.delayBufferSamples.length-1) {\n    this.delayInputPointer = this.delayInputPointer - this.delayBufferSamples.length; \n  }\n};\n\n/**\n * Change the return signal volume.\n *\n * @param {Number} delayVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\nSingleDelay.prototype.setDelayVolume = function(delayVolume) {\n  this.delayVolume = delayVolume;\n};\n\n/**\n * Process a given interleaved or mono non-interleaved float value Array and\n * returns the delayed audio.\n *\n * @param {Array} samples Array containing Float values or a Float32Array\n *\n * @returns A new Float32Array interleaved or mono non-interleaved as was fed to this function.\n */\nSingleDelay.prototype.process = function(samples) {\n  // NB. Make a copy to put in the output samples to return.\n  var outputSamples = new Float32Array(samples.length);\n\n  for (var i=0; i<samples.length; i++) {\n\n    // Add audio data with the delay in the delay buffer\n    this.delayBufferSamples[this.delayInputPointer] = samples[i];\n   \n    // delayBufferSamples could contain initial NULL\'s, return silence in that case\n    var delaySample = this.delayBufferSamples[this.delayOutputPointer];\n\n    // Return the audio with delay mix\n    outputSamples[i] = delaySample * this.delayVolume;\n\n    // Manage circulair delay buffer pointers\n    this.delayInputPointer++;\n\n    if (this.delayInputPointer >= this.delayBufferSamples.length-1) {\n      this.delayInputPointer = 0;\n    }\n     \n    this.delayOutputPointer++;\n\n    if (this.delayOutputPointer >= this.delayBufferSamples.length-1) {\n      this.delayOutputPointer = 0; \n    } \n  }\n \n  return outputSamples;\n};\n\n/**\n * Reverb effect by Almer Thie (http://code.almeros.com).\n * Copyright 2010 Almer Thie. All rights reserved.\n * Example: http://code.almeros.com/code-examples/reverb-firefox-audio-api/\n *\n * This reverb consists of 6 SingleDelays, 6 MultiDelays and an IIRFilter2\n * for each of the two stereo channels.\n *\n * Compatible with interleaved stereo buffers only!\n *\n * @param {Number} maxDelayInSamplesSize Maximum possible delay in samples (size of circular buffers)\n * @param {Number} delayInSamples Initial delay in samples for internal (Single/Multi)delays\n * @param {Number} masterVolume Initial master volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n * @param {Number} mixVolume Initial reverb signal mix volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n * @param {Number} delayVolume Initial feedback delay volume for internal (Single/Multi)delays. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n * @param {Number} dampFrequency Initial low pass filter frequency. 0 to 44100 (depending on your maximum sampling frequency)\n *\n * @constructor\n */\nfunction Reverb(maxDelayInSamplesSize, delayInSamples, masterVolume, mixVolume, delayVolume, dampFrequency) {\n  this.delayInSamples   = delayInSamples;\n  this.masterVolume     = masterVolume;\n  this.mixVolume       = mixVolume;\n  this.delayVolume     = delayVolume;\n  this.dampFrequency     = dampFrequency;\n \n  this.NR_OF_MULTIDELAYS = 6;\n  this.NR_OF_SINGLEDELAYS = 6;\n \n  this.LOWPASSL = new IIRFilter2(DSP.LOWPASS, dampFrequency, 0, 44100);\n  this.LOWPASSR = new IIRFilter2(DSP.LOWPASS, dampFrequency, 0, 44100);\n \n  this.singleDelays = [];\n  \n  var i, delayMultiply;\n\n  for (i = 0; i < this.NR_OF_SINGLEDELAYS; i++) {\n    delayMultiply = 1.0 + (i/7.0); // 1.0, 1.1, 1.2...\n    this.singleDelays[i] = new SingleDelay(maxDelayInSamplesSize, Math.round(this.delayInSamples * delayMultiply), this.delayVolume);\n  }\n \n  this.multiDelays = [];\n\n  for (i = 0; i < this.NR_OF_MULTIDELAYS; i++) {\n    delayMultiply = 1.0 + (i/10.0); // 1.0, 1.1, 1.2... \n    this.multiDelays[i] = new MultiDelay(maxDelayInSamplesSize, Math.round(this.delayInSamples * delayMultiply), this.masterVolume, this.delayVolume);\n  }\n}\n\n/**\n * Change the delay time in samples as a base for all delays.\n *\n * @param {Number} delayInSamples Delay in samples\n */\nReverb.prototype.setDelayInSamples = function (delayInSamples){\n  this.delayInSamples = delayInSamples;\n\n  var i, delayMultiply;\n \n  for (i = 0; i < this.NR_OF_SINGLEDELAYS; i++) {\n    delayMultiply = 1.0 + (i/7.0); // 1.0, 1.1, 1.2...\n    this.singleDelays[i].setDelayInSamples( Math.round(this.delayInSamples * delayMultiply) );\n  }\n   \n  for (i = 0; i < this.NR_OF_MULTIDELAYS; i++) {\n    delayMultiply = 1.0 + (i/10.0); // 1.0, 1.1, 1.2...\n    this.multiDelays[i].setDelayInSamples( Math.round(this.delayInSamples * delayMultiply) );\n  }\n};\n\n/**\n * Change the master volume.\n *\n * @param {Number} masterVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\nReverb.prototype.setMasterVolume = function (masterVolume){\n  this.masterVolume = masterVolume;\n};\n\n/**\n * Change the reverb signal mix level.\n *\n * @param {Number} mixVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\nReverb.prototype.setMixVolume = function (mixVolume){\n  this.mixVolume = mixVolume;\n};\n\n/**\n * Change all delays feedback volume.\n *\n * @param {Number} delayVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\nReverb.prototype.setDelayVolume = function (delayVolume){\n  this.delayVolume = delayVolume;\n \n  var i;\n\n  for (i = 0; i<this.NR_OF_SINGLEDELAYS; i++) {\n    this.singleDelays[i].setDelayVolume(this.delayVolume);\n  } \n \n  for (i = 0; i<this.NR_OF_MULTIDELAYS; i++) {\n    this.multiDelays[i].setDelayVolume(this.delayVolume);\n  } \n};\n\n/**\n * Change the Low Pass filter frequency.\n *\n * @param {Number} dampFrequency low pass filter frequency. 0 to 44100 (depending on your maximum sampling frequency)\n */\nReverb.prototype.setDampFrequency = function (dampFrequency){\n  this.dampFrequency = dampFrequency;\n \n  this.LOWPASSL.set(dampFrequency, 0);\n  this.LOWPASSR.set(dampFrequency, 0); \n};\n\n/**\n * Process a given interleaved float value Array and copies and adds the reverb signal.\n *\n * @param {Array} samples Array containing Float values or a Float32Array\n *\n * @returns A new Float32Array interleaved buffer.\n */\nReverb.prototype.process = function (interleavedSamples){ \n  // NB. Make a copy to put in the output samples to return.\n  var outputSamples = new Float32Array(interleavedSamples.length);\n \n  // Perform low pass on the input samples to mimick damp\n  var leftRightMix = DSP.deinterleave(interleavedSamples);\n  this.LOWPASSL.process( leftRightMix[DSP.LEFT] );\n  this.LOWPASSR.process( leftRightMix[DSP.RIGHT] ); \n  var filteredSamples = DSP.interleave(leftRightMix[DSP.LEFT], leftRightMix[DSP.RIGHT]);\n\n  var i;\n\n  // Process MultiDelays in parallel\n  for (i = 0; i<this.NR_OF_MULTIDELAYS; i++) {\n    // Invert the signal of every even multiDelay\n    outputSamples = DSP.mixSampleBuffers(outputSamples, this.multiDelays[i].process(filteredSamples), 2%i === 0, this.NR_OF_MULTIDELAYS);\n  }\n \n  // Process SingleDelays in series\n  var singleDelaySamples = new Float32Array(outputSamples.length);\n  for (i = 0; i<this.NR_OF_SINGLEDELAYS; i++) {\n    // Invert the signal of every even singleDelay\n    singleDelaySamples = DSP.mixSampleBuffers(singleDelaySamples, this.singleDelays[i].process(outputSamples), 2%i === 0, 1);\n  }\n\n  // Apply the volume of the reverb signal\n  for (i = 0; i<singleDelaySamples.length; i++) {\n    singleDelaySamples[i] *= this.mixVolume;\n  }\n \n  // Mix the original signal with the reverb signal\n  outputSamples = DSP.mixSampleBuffers(singleDelaySamples, interleavedSamples, 0, 1);\n\n  // Apply the master volume to the complete signal\n  for (i = 0; i<outputSamples.length; i++) {\n    outputSamples[i] *= this.masterVolume;\n  }\n   \n  return outputSamples;\n};\n\n'},function(e,n,t){"use strict";t.r(n);t(6);var a=t(0),i=t.n(a),r={createAudioEvent:(e=0,n="",t=0,a=0)=>({instrument:e,note:n,octave:t,action:a,recording:!1,seq:{playing:!1,startMeasure:0,startMeasureOffset:0,endMeasure:0,length:0,mpLength:0}}),createModuleParam:(e,n,t)=>({module:e,value:n,glide:t||!1})};const s={setPosition(e,n,t,a,r,s){const l=u(r),o=a/n.steps*l,f=e.seq;i.a.set(f,"length","number"==typeof s?s:1/n.steps*l),i.a.set(f,"startMeasure",t),i.a.set(f,"startMeasureOffset",o),i.a.set(f,"endMeasure",t+Math.abs(Math.ceil((o+s-l)/l)))},linkEvent(e,n,t,a){const i=a[n],r=i.getNodeByData(e),s=t.patterns;r&&i.remove(r);let l,u,f,c,h,p,d,m=!1;for(f=e.seq.startMeasure,c=s.length;f<c;++f)for(h=0,p=(u=s[f].channels[n]).length;h<p;++h)if(l=u[h],m){if(l)return o(d=i.addBefore(l,e),t.meta.tempo),d}else l===e&&(m=!0);return o(d=i.add(e),t.meta.tempo),d},linkEvents(e,n){n.forEach((n,t)=>{n.flush(),e.forEach(e=>{e.channels[t].forEach(e=>{e&&n.add(e)})})})},clearEvent(e,n,t,a,r){const s=e.patterns[n].channels[t];if(r){const n=r.getNodeByData(s[a]);if(n){const t=n.next;n.remove(),t&&o(t,e.meta.tempo)}}i.a.set(s,a,0)},clearEventByReference(e,n,t){let a=!1;e.patterns.forEach((i,r)=>{i.channels.forEach((i,l)=>{a||i.forEach((i,o)=>{i===n&&(s.clearEvent(e,r,l,o,t[l]),a=!0)})})})},getFirstEventBeforeStep(e,n,t){let a;for(let i=n-1;i>=0;--i)if((a=e[i])&&("function"!=typeof t||t(a)))return a;return null},glideModuleParams(e,n,t,a,l){const o=l[t],u=e.patterns[n].channels[t][a],f=u.mp,c=o.getNodeByData(u);let h,p,d;if(!f||!c)return null;for(d=c.next;d;){if(p=(h=d.data).mp){if(p.module===f.module)break;return null}d=d.next}if(!p)return null;i.a.set(f,"glide",!0),i.a.set(p,"glide",!0);let m=!1,y=u;const b=[],g=(n,t,a,l,f)=>("object"!=typeof n&&(n=r.createAudioEvent(u.instrument),i.a.set(l,f,n),o.addAfter(y,n),s.setPosition(n,t,a,f,e.meta.tempo)),i.a.set(n,"mp",{module:u.mp.module,value:0,glide:!0}),n);for(let a=n;a<e.patterns.length;++a){const n=e.patterns[a],i=n.channels[t];for(let e=0;e<i.length;++e){let t=i[e];if(t===u)m=!0;else{if(t===h)break;m&&(t=g(t,n,a,i,e),b.push(t),y=t)}}}const v=b.length+1;let S;return p.value,f.value,S=(p.value-f.value)/v,b.forEach((e,n)=>{const t=e.mp;i.a.set(t,"value",f.value+(n+1)*S)}),b},glideParameterAutomations(e,n,t,a,r,l){const o=e.patterns[t].channels[a],u=s.getFirstEventBeforeStep(o,n,e=>!!e.mp);let f=null;const c=()=>{const n=o.indexOf(u);f=s.glideModuleParams(e,t,a,n,r)};u&&c(),f?l.commit("saveState",{undo:()=>{f.forEach(n=>{""===n.note?s.clearEventByReference(e,n,r):i.a.set(n,"mp",null)})},redo:c}):l.commit("showError",l.getters.t("error.paramGlide"))}};var l=s;function o(e,n){if(e.previous){const t=e.data.seq,a=e.previous.data.seq;if(a.startMeasure===t.startMeasure)i.a.set(a,"length",t.startMeasureOffset-a.startMeasureOffset);else{const e=t.startMeasure,r=u(n);let s=a.startMeasure,l=r-a.startMeasureOffset,o=0;for(;s<e;)o>0&&(l+=r),++s,++o;i.a.set(a,"length",l+t.startMeasureOffset)}}}function u(e){return 60/e*4}var f=t(2),c=t.n(f),h={LOCAL_STORAGE_SONGS:"effluxData",LOCAL_STORAGE_INSTRUMENTS:"effluxInstruments",LOCAL_STORAGE_SETTINGS:"effluxSettings",INSTRUMENT_AMOUNT:8,OSCILLATOR_AMOUNT:3,WAVE_TABLE_SIZE:512,MAX_PATTERN_AMOUNT:128,MAX_OCTAVE:8,SONG_FILE_EXTENSION:".xtk",INSTRUMENT_FILE_EXTENSION:".xit",MIN_EQ_GAIN:-40,DEFAULT_FILTER_FREQ:880,DEFAULT_FILTER_Q:5,MAX_FILTER_FREQ:24e3,MAX_FILTER_Q:40,DEFAULT_FILTER_LFO_SPEED:.5,DEFAULT_FILTER_LFO_DEPTH:50,MAX_FILTER_LFO_SPEED:25,MAX_FILTER_LFO_DEPTH:100,DEFAULT_DELAY_MIX:.65,DEFAULT_DELAY_FEEDBACK:.01,DEFAULT_DELAY_TIME:.33,DEFAULT_DELAY_CUT_OFF:1500,MAX_DELAY_TIME:2,MAX_DELAY_FEEDBACK:1,MAX_DELAY_CUTOFF:22050,MAX_DELAY_OFFSET:1,getBasePath:()=>"string"==typeof window.effluxPath?window.effluxPath:window.location.origin+window.location.pathname,isDevMode:()=>"localhost"===window.location.hostname,canHover:()=>!c.a.ios},p={clone:e=>JSON.parse(JSON.stringify(e))};const d={createInstrument(e,n){const t={id:e,name:"string"==typeof n?n:`'Instrument ${e.toString()}`,presetName:null,oscillators:[d.createOscillator(!0,"TRIANGLE"),d.createOscillator(!1,"SINE"),d.createOscillator(!1,"SAW")],volume:1,panning:0,filter:{enabled:!1,frequency:h.DEFAULT_FILTER_FREQ,q:h.DEFAULT_FILTER_Q,speed:h.DEFAULT_FILTER_LFO_SPEED,depth:h.DEFAULT_FILTER_LFO_DEPTH,type:"lowpass",lfoType:"off"},delay:{enabled:!1,type:0,time:.5,feedback:.5,cutoff:880,offset:0}};return d.createOverdrive(t),d.createEQ(t),t},createOverdrive(e){"object"!=typeof e.overdrive&&(e.overdrive={enabled:!1,preBand:1,postCut:8e3,color:4e3,drive:.8})},createEQ(e){"object"!=typeof e.eq&&(e.eq={enabled:!1,lowGain:1,midGain:1,highGain:1})},createOscillator(e,n="SAW"){const t={enabled:e,waveform:n,table:0,volume:1,detune:0,octaveShift:0,fineShift:0,adsr:{attack:0,decay:0,sustain:.75,release:0}};return d.createPitchEnvelope(t),t},createPitchEnvelope(e){"object"!=typeof e.pitch&&(e.pitch={range:0,attack:0,decay:1,sustain:.75,release:0})},getTableForOscillator(e,n){if(!e.table)for("number"!=typeof n&&(n=h.WAVE_TABLE_SIZE),e.table=new Array(n);n--;)e.table[n]=0;return e.table},loadPreset(e,n,t){const a=p.clone(e);return a.id=n,a.name=t,a.panning=a.panning||0,a.oscillators.forEach(e=>d.createPitchEnvelope(e)),d.createOverdrive(a),d.createEQ(a),a}};var m=d,y={isValid:e=>!!e&&("string"==typeof e.id&&"number"==typeof e.version&&void 0!==e.meta&&Array.isArray(e.instruments)&&Array.isArray(e.patterns)),transformLegacy:e=>e&&e.instruments?(e.instruments.forEach(e=>{e.oscillators.forEach(e=>{"object"!=typeof e.pitch&&m.createPitchEnvelope(e)}),"object"!=typeof e.eq&&m.createEQ(e),"object"!=typeof e.od&&m.createOverdrive(e)}),e.patterns.forEach((e,n)=>{e.channels.forEach(e=>{e.forEach(e=>{if(e&&e.seq){const t=e.seq.startMeasure,a=e.seq.endMeasure,i=isNaN(a)?1:a-t;e.seq.startMeasure=n,e.seq.endMeasure=e.seq.startMeasure+i}})})}),e):null};const b=e=>{try{const n=(e="string"==typeof e?JSON.parse(e):e)[g];if("number"==typeof n){const t={};return t.id=e[v],t.version=e[S],function(e,n,t){e.meta={title:t[w],author:t[T],created:t[_],modified:t[P],tempo:t[x]}}(t,0,e[A]),function(e,n,t){let a,i,r,s;e.instruments=new Array(t.length),t.forEach((t,l)=>{a=t[X],i=t[Z],r=t[O],s=t[V],e.instruments[l]={id:t[E],name:t[I],presetName:t[M],volume:t[D],panning:t[R]||0,delay:{enabled:r[q],type:r[B],cutoff:parseFloat(r[L]),feedback:parseFloat(r[N]),offset:parseFloat(r[k]),time:parseFloat(r[C])},filter:{enabled:s[z],depth:parseFloat(s[W]),frequency:parseFloat(s[G]),q:parseFloat(s[U]),speed:parseFloat(s[j]),lfoType:s[Q],type:s[H]},oscillators:new Array(t[re].length)},n>=3&&(e.instruments[l].eq={enabled:a[Y],lowGain:a[K],midGain:a[J],highGain:a[$]},e.instruments[l].overdrive={enabled:i[ee],preBand:i[ne],postCut:i[te],color:i[ae],drive:i[ie]}),t[re].forEach((t,a)=>{const i=e.instruments[l].oscillators[a]={enabled:t[se],adsr:{attack:t[le][fe],decay:t[le][ce],sustain:t[le][he],release:t[le][pe]},detune:t[de],fineShift:t[me],octaveShift:t[ye],volume:t[be],waveform:t[ge],table:t[ve]};n>=2&&(i.pitch={range:t[oe][ue],attack:t[oe][fe],decay:t[oe][ce],sustain:t[oe][he],release:t[oe][pe]})})})}(t,n,e[F]),function(e,n,t,a){let i,r,s;e.patterns=new Array(t.length),t.forEach((n,t)=>{i=e.patterns[t]={steps:n[Ae],channels:n[we]},n[we].forEach((e,n)=>{r=i.channels[n]=new Array(e.length),e.forEach((e,n)=>{if(e){s={action:e[Te],id:e[_e],instrument:e[Pe],note:e[xe],octave:e[Fe],recording:!1,seq:{playing:!1,mpLength:0}},l.setPosition(s,i,t,n,a,e[Ee]);const r=e[Ie];r&&(s.mp={module:r[Me],value:r[De],glide:r[Re]})}else s=0;r[n]=s})})})}(t,0,e[Se],t.meta.tempo),y.transformLegacy(t),t}return e}catch(e){return null}};const g="av",v="si",S="sv",A="m",w="t",T="a",_="c",P="dm",x="tm",F="ins",E="i",I="n",M="pn",D="v",R="ip",O="d",q="e",L="c",N="f",k="o",C="t",B="tp",V="f",z="e",W="d",G="f",Q="lt",U="q",j="s",H="ft",X="eq",Y="e",K="l",J="m",$="h",Z="od",ee="e",ne="pb",te="pc",ae="c",ie="d",re="o",se="e",le="a",oe="pe",ue="pr",fe="a",ce="d",he="s",pe="r",de="d",me="f",ye="o",be="v",ge="w",ve="t",Se="p",Ae="s",we="c",Te="a",_e="i",Pe="ins",xe="n",Fe="o",Ee="l",Ie="ma",Me="m",De="v",Re="g";const Oe=!!("AudioContext"in window)||"webkitAudioContext"in window&&"function"==typeof(new window.webkitAudioContext).createGain,qe=window.document,Le={panning:!1};let Ne;const ke=new Float32Array(256);for(let e=0;e<128;++e)ke[e]=-1,ke[e+128]=1;const Ce=new Float32Array(2);Ce[0]=1,Ce[1]=1;const Be={createWaveTableFromGraph(e,n){const t=new window.DFT(n.length);return t.forward(n),e.createPeriodicWave(t.real,t.imag)},createTimer(e,n,t){const a=e.createOscillator();return a.onended=t,Ne||((Ne=Be.createGainNode(e)).gain.value=0,Ne.connect(e.destination)),a.connect(Ne),Be.startOscillation(a,e.currentTime),Be.stopOscillation(a,n),a},beep(e,n,t,a){const i=e.createOscillator();return i.connect(e.destination),i.frequency.value=n,"number"==typeof t&&0!==t||(t=e.currentTime),"number"!=typeof a&&(a=1),i.onended=(()=>i.disconnect()),Be.startOscillation(i,t),Be.stopOscillation(i,t+a),i},startOscillation(e,n){Oe?e.start(n):e.noteOn(n)},stopOscillation(e,n){try{Oe?e.stop(n):e.noteOff(n)}catch(e){}},createGainNode:e=>Oe?e.createGain():e.createGainNode(),createStereoPanner:e=>"function"!=typeof e.createStereoPanner?null:e.createStereoPanner(),setValue(e,n,t){e.cancelScheduledValues(t.currentTime),e.setValueAtTime(n,t.currentTime)},createPWM(e,n,t,a=e.destination){const i=e.createOscillator();i.type="sawtooth";const r=e.createWaveShaper();r.curve=ke,i.connect(r);const s=Be.createGainNode(e);s.gain.value=0,i.width=s.gain,s.connect(r);const l=e.createWaveShaper();l.curve=Ce,i.connect(l),l.connect(s);const o=e.createOscillator(),u=Be.createGainNode(e),f=e.createBiquadFilter();return o.type="triangle",o.frequency.value=10,i.connect=function(){r.connect.apply(r,arguments)},i.disconnect=function(){r.disconnect.apply(r,arguments),s.disconnect(),l.disconnect(),u.disconnect(),f.disconnect()},i.width.value=.4,i.width.exponentialRampToValueAtTime(.1,t),u.gain.value=.1,u.gain.exponentialRampToValueAtTime(.05,n+.5),u.gain.exponentialRampToValueAtTime(.15,t),o.connect(u),u.connect(i.width),o.start(n),o.stop(t),f.type="lowpass",f.frequency.value=16e3,f.frequency.exponentialRampToValueAtTime(440,t),i.connect(f),f.connect(a),i},init:()=>new Promise((e,n)=>{let t;const a=()=>{if(qe.removeEventListener("click",a,!1),qe.removeEventListener("keydown",a,!1),void 0!==window.AudioContext)t=new window.AudioContext;else{if(void 0===window.webkitAudioContext)return void n(new Error("WebAudio API not supported"));t=new window.webkitAudioContext}Le.panning="function"==typeof t.createStereoPanner,e(t)};qe.addEventListener("click",a),qe.addEventListener("keydown",a)}),supports:e=>!!Le[e]};var Ve=Be;const ze=(e,n)=>{let t,a,i,r;for(t=e.length;t--;)if(i=e[t])for(a=i.length;a--;)(r=i[a])&&n(r,a)},We=["off","sine","square","sawtooth","triangle"],Ge={applyRouting(e,n){const t=[],a=e.output,i=e.panner,r=e.eq,s=e.overdrive.overdrive,l=e.filter.filter,o=e.delay.delay;a.disconnect(),s.disconnect(),r.output.disconnect(),l.disconnect(),o.output.disconnect();let u,f=a;i&&(i.disconnect(),f.connect(i),f=i),r.eqEnabled&&(f.connect(r.lowBand),f.connect(r.midBand),f.connect(r.highBand),f=r.output),e.overdrive.overdriveEnabled&&t.push(s),e.filter.filterEnabled&&t.push(l),e.delay.delayEnabled&&t.push(o),t.push(n),t.forEach(e=>{u=e.input instanceof GainNode?e.input:e,f.connect(u),f=e.output instanceof GainNode?e.output:e})},applyModuleParamChange(e,n,t,a,i,r){switch(e.mp.module){case"volume":!function(e,n,t){const a=e.mp,i=a.glide,r=e.seq.mpLength,s=a.value/100;ze(n,e=>{Ue(e.gain.gain,s,t,r,i,e)})}(e,a,i);break;case"panLeft":case"panRight":!function(e,n,t){const a=e.mp,i=a.glide,r=e.seq.mpLength,s=a.value/100;Ue(n.panner.pan,"panLeft"===a.module?-s:s,t,r,i)}(e,n,i);break;case"pitchUp":case"pitchDown":!function(e,n,t){const a=e.mp,i=a.glide,r=e.seq.mpLength,s="pitchUp"===a.module;let l,o,u;ze(n,e=>{(l=e.generator)instanceof OscillatorNode?(o=e.frequency+e.frequency/1200,u=o*(a.value/100),s?u+=e.frequency:u=e.frequency-u/2,Ue(l.frequency,u,t,r,i,e)):l instanceof AudioBufferSourceNode&&(o=a.value/100,u=s?l.playbackRate.value+o:l.playbackRate.value-o,Ue(l.playbackRate,u,t,r,i,e))})}(e,a,i);break;case"filterEnabled":n.filter.filterEnabled=e.mp.value>=50,Ge.applyRouting(n,r);break;case"filterLFOEnabled":t.filter.lfoType=((e,n)=>e[Math.round(n/(100/(e.length-1)))])(We,e.mp.value),Ge.applyRouting(n,r);break;case"filterFreq":case"filterQ":case"filterLFOSpeed":case"filterLFODepth":!function(e,n,t){const a=e.mp,i=a.glide,r=e.seq.mpLength,s=n.filter,l=a.value/100;switch(a.module){case"filterFreq":Ue(s.filter.frequency,l*h.MAX_FILTER_FREQ,t,r,i);break;case"filterQ":Ue(s.filter.Q,l*h.MAX_FILTER_Q,t,r,i);break;case"filterLFOSpeed":Ue(s.lfo.frequency,l*h.MAX_FILTER_LFO_SPEED,t,r,i);break;case"filterLFODepth":Ue(s.lfoAmp.gain,l*h.MAX_FILTER_LFO_DEPTH/100*s.filter.frequency.value,t,r,i)}}(e,n,i);break;case"delayEnabled":n.delay.delayEnabled=e.mp.value>=50,Ge.applyRouting(n,r);break;case"delayTime":case"delayFeedback":case"delayCutoff":case"delayOffset":!function(e,n){const t=e.mp,a=n.delay.delay,i=t.value/100;switch(t.module){case"delayTime":a.delay=i*h.MAX_DELAY_TIME;break;case"delayFeedback":a.feedback=i*h.MAX_DELAY_FEEDBACK;break;case"delayCutoff":a.cutoff=i*h.MAX_DELAY_CUTOFF;break;case"delayOffset":a.offset=i*h.MAX_DELAY_OFFSET}}(e,n)}}};var Qe=Ge;function Ue(e,n,t,a,i,r){(!i||r&&!r.gliding)&&(e.cancelScheduledValues(t),e.setValueAtTime(i?e.value:n,t)),i&&(e.linearRampToValueAtTime(n,t+a),r&&(r.gliding=!0))}function je(e,n){this.input=e.createGain(),this.output=e.createGain(),this._filter=e.createBiquadFilter(),this._dry=e.createGain(),this._wet=e.createGain();var t=this.meta.params;n=n||{},this._type=n.type||t.type.defaultValue,this._filter.frequency.value=n.frequency||t.frequency.defaultValue,this._filter.Q.value=n.Q||t.Q.defaultValue,this._filter.gain.value=n.gain||t.gain.defaultValue,this._wet.gain.value=n.wet||t.wet.defaultValue,this._dry.gain.value=n.dry||t.dry.defaultValue,this._filter.type=this._type,this.input.connect(this._filter),this._filter.connect(this._wet),this._wet.connect(this.output),this.input.connect(this._dry),this._dry.connect(this.output)}function He(e,n){this.input=e.createGain(),this.output=e.createGain();var t=this.meta.params;if((n=n||{}).type=~~n.type||t.type.defaultValue,n.delay=n.delay||t.delay.defaultValue,n.feedback=n.feedback||t.feedback.defaultValue,n.cutoff=n.cutoff||t.cutoff.defaultValue,n.dry=n.dry||t.dry.defaultValue,n.offset=n.offset||t.offset.defaultValue,n.feedback>=1)throw new Error("Feedback value will force a positive feedback loop.");this._split=e.createChannelSplitter(2),this._merge=e.createChannelMerger(2),this._leftDelay=e.createDelay(),this._rightDelay=e.createDelay(),this._leftGain=e.createGain(),this._rightGain=e.createGain(),this._leftFilter=new je.Lowpass(e,{frequency:n.cutoff}),this._rightFilter=new je.Lowpass(e,{frequency:n.cutoff}),this._dry=e.createGain(),this._type=n.type,this._delayTime=n.delay,this._offset=n.offset,this._leftDelay.delayTime.value=n.delay,this._rightDelay.delayTime.value=n.delay,this._leftGain.gain.value=n.feedback,this._rightGain.gain.value=n.feedback,this.input.connect(this._split),this._leftDelay.connect(this._leftGain),this._rightDelay.connect(this._rightGain),this._leftGain.connect(this._leftFilter.input),this._rightGain.connect(this._rightFilter.input),this._merge.connect(this.output),this._route(),this.input.connect(this._dry),this._dry.connect(this.output)}je.prototype=Object.create(null,{connect:{value:function(e){this.output.connect(e.input?e.input:e)}},disconnect:{value:function(){this.output.disconnect()}},meta:{value:{name:"Filter",params:{type:{min:0,max:7,defaultValue:"lowpass",type:"int"},frequency:{min:0,max:22050,defaultValue:8e3,type:"float"},Q:{min:1e-4,max:1e3,defaultValue:1,type:"float"},gain:{min:-40,max:40,defaultValue:1,type:"float"},wet:{min:0,max:1,defaultValue:1,type:"float"},dry:{min:0,max:1,defaultValue:0,type:"float"}}}},type:{enumerable:!0,get:function(){return this._type},set:function(e){this._type=~~e,this._filter.type=~~e}},frequency:{enumerable:!0,get:function(){return this._filter.frequency.value},set:function(e){this._filter.frequency.setValueAtTime(e,0)}},Q:{enumerable:!0,get:function(){return this._filter.Q.value},set:function(e){this._filter.Q.setValueAtTime(e,0)}},gain:{enumerable:!0,get:function(){return this._filter.gain.value},set:function(e){this._filter.gain.setValueAtTime(e,0)}},wet:{enumerable:!0,get:function(){return this._wet.gain.value},set:function(e){this._wet.gain.setValueAtTime(e,0)}},dry:{enumerable:!0,get:function(){return this._dry.gain.value},set:function(e){this._dry.gain.setValueAtTime(e,0)}}}),je.Lowpass=function(e,n){return n.type="lowpass",new je(e,n)},je.Highpass=function(e,n){return n.type="highpass",new je(e,n)},je.Bandpass=function(e,n){return n.type="bandpass",new je(e,n)},je.Lowshelf=function(e,n){return n.type="lowshelf",new je(e,n)},je.Highshelf=function(e,n){return n.type="highshelf",new je(e,n)},je.Peaking=function(e,n){return n.type="peaking",new je(e,n)},je.Notch=function(e,n){return n.type="notch",new je(e,n)},je.Allpass=function(e,n){return n.type="allpass",new je(e,n)},He.prototype=Object.create(null,{connect:{value:function(e){this.output.connect(e.input?e.input:e)}},disconnect:{value:function(){this.output.disconnect()}},meta:{value:{name:"delay",params:{type:{min:0,max:2,defaultValue:0,type:"int"},delay:{min:0,max:10,defaultValue:1,type:"float"},feedback:{min:0,max:1,defaultValue:.5,type:"float"},cutoff:{min:0,max:22050,defaultValue:8e3,type:"float"},offset:{min:-.5,max:.5,defaultValue:0,type:"float"},dry:{min:0,max:1,defaultValue:1,type:"float"}}}},_route:{value:function(){this._split.disconnect(),this._leftFilter.disconnect(),this._rightFilter.disconnect(),this._leftFilter.connect(this._merge,0,0),this._rightFilter.connect(this._merge,0,1),this[["_routeNormal","_routeInverted","_routePingPong"][this._type]]()}},_routeNormal:{value:function(){this._split.connect(this._leftDelay,0),this._split.connect(this._rightDelay,1),this._leftFilter.connect(this._leftDelay),this._rightFilter.connect(this._rightDelay)}},_routeInverted:{value:function(){this._split.connect(this._leftDelay,1),this._split.connect(this._rightDelay,0),this._leftFilter.connect(this._leftDelay),this._rightFilter.connect(this._rightDelay)}},_routePingPong:{value:function(){this._split.connect(this._leftDelay,0),this._split.connect(this._rightDelay,1),this._leftFilter.connect(this._rightDelay),this._rightFilter.connect(this._leftDelay)}},type:{enumerable:!0,get:function(){return this._type},set:function(e){this._type=~~e,this._route()}},delay:{enumerable:!0,get:function(){return this._leftDelay.delayTime.value},set:function(e){this._leftDelay.delayTime.setValueAtTime(e,0),this._rightDelay.delayTime.setValueAtTime(e,0)}},feedback:{enumerable:!0,get:function(){return this._leftGain.gain.value},set:function(e){this._leftGain.gain.setValueAtTime(e,0),this._rightGain.gain.setValueAtTime(e,0)}},cutoff:{enumerable:!0,get:function(){return this._leftFilter.frequency},set:function(e){this._leftFilter.frequency=e,this._rightFilter.frequency=e}},offset:{enumerable:!0,get:function(){return this._offset},set:function(e){var n=this._delayTime+e;this._offset=e,e<0?(this._leftDelay.delayTime.setValueAtTime(n,0),this._rightDelay.delayTime.setValueAtTime(this._delayTime,0)):(this._leftDelay.delayTime.setValueAtTime(this._delayTime,0),this._rightDelay.delayTime.setValueAtTime(n,0))}},dry:{enumerable:!0,get:function(){return this._dry.gain.value},set:function(e){this._dry.gain.setValueAtTime(e,0)}}});var Xe=He,Ye=t(3),Ke=t.n(Ye);const Je={applyConfiguration(e,n,t,a){switch(e){default:throw new Error(`unknown module ${e} in ModuleFactory`);case"filter":return Je.applyFilterConfiguration(n,t,a);case"delay":return Je.applyDelayConfiguration(n,t,a);case"eq":return Je.applyEQConfiguration(n,t,a);case"overdrive":return Je.applyODConfiguration(n,t,a)}},createEQ(e){const n=e.createBiquadFilter();n.type="lowshelf",n.frequency.value=360,n.gain.value=h.MIN_EQ_GAIN;const t=Ve.createGainNode(e);t.gain.value=-1;const a=Ve.createGainNode(e),i=e.createBiquadFilter();i.type="highshelf",i.frequency.value=3600,i.gain.value=h.MIN_EQ_GAIN;const r=Ve.createGainNode(e);r.gain.value=-1,n.connect(t),i.connect(r),t.connect(a),r.connect(a);const s=Ve.createGainNode(e),l=Ve.createGainNode(e),o=Ve.createGainNode(e);i.connect(s),a.connect(l),n.connect(o);const u=Ve.createGainNode(e);return s.connect(u),l.connect(u),o.connect(u),{lowBand:i,midBand:a,highBand:n,lowGain:s,midGain:l,highGain:o,output:u,eqEnabled:!1}},createFilter(e){const n=e.createBiquadFilter(),t=e.createOscillator(),a=Ve.createGainNode(e);return Ve.startOscillation(t,e.currentTime),a.connect(n.frequency),t.frequency.value=h.DEFAULT_FILTER_LFO_SPEED,a.gain.value=h.DEFAULT_FILTER_LFO_DEPTH/100*n.frequency.value,n.frequency.value=h.DEFAULT_FILTER_FREQ,n.Q.value=h.DEFAULT_FILTER_Q,{filter:n,lfo:t,lfoAmp:a,lfoEnabled:!1,filterEnabled:!1}},createDelay:e=>({delay:new Xe(e,{type:0,delay:.5,feedback:.42,offset:-.027,cutoff:1200}),delayEnabled:!1}),createOverdrive:e=>({overdrive:new Ke.a(e,{preBand:1,postCut:8e3,color:4e3,drive:.8}),overdriveEnabled:!1}),applyEQConfiguration(e,n,t){const a=e.eq;a.eqEnabled=n.enabled,a.lowGain.gain.value=n.lowGain,a.midGain.gain.value=n.midGain,a.highGain.gain.value=n.highGain,Qe.applyRouting(e,t)},applyODConfiguration(e,n,t){const a=e.overdrive;a.overdriveEnabled=n.enabled,a.overdrive.color=n.color,a.overdrive.drive=n.drive,a.overdrive.preBand=n.preBand,a.overdrive.postCut=n.postCut,Qe.applyRouting(e,t)},applyFilterConfiguration(e,n,t){const a=e.filter,i="off"!==n.lfoType;a.filter.frequency.value=n.frequency,a.filter.Q.value=n.q,a.lfo.frequency.value=n.speed,a.lfoAmp.gain.value=n.depth/100*n.frequency,i&&(a.lfo.type=n.lfoType),a.filter.type=n.type,a.filterEnabled=n.enabled,Qe.applyRouting(e,t),i?a.lfoEnabled||(a.lfo.connect(a.lfoAmp),a.lfoEnabled=!0):a.lfoEnabled&&(a.lfoEnabled=!1,a.lfo.disconnect())},applyDelayConfiguration(e,n,t){const a=e.delay.delay;a.type=n.type,a.delay=n.time,a.feedback=n.feedback,a.offset=n.offset,a.cutoff=n.cutoff,e.delay.delayEnabled=n.enabled,Qe.applyRouting(e,t)}};var $e=Je;let Ze={};const en={tuneToOscillator(e,n){const t=e+e/1200*n.detune;let a=t;0!==n.octaveShift&&(n.octaveShift<0?a=t/Math.abs(2*n.octaveShift):a+=t*Math.abs(2*n.octaveShift)-1);const i=t/12*Math.abs(n.fineShift);return n.fineShift<0?a-=i:a+=i,a},tuneBufferPlayback:e=>1+e.detune/50,adjustEventTunings(e,n,t){e.forEach(e=>{if(e&&e.length>n){const a=e[n];if(!a)return;const i=a.generator;i instanceof OscillatorNode?i.frequency.value=en.tuneToOscillator(a.frequency,t):i instanceof AudioBufferSourceNode&&(i.playbackRate.value=en.tuneBufferPlayback(t))}})},adjustEventVolume(e,n,t){e.forEach(e=>{if(e&&e.length>n){const a=e[n];if(!a)return;a.gain.gain.value=t.volume}})},adjustEventWaveForms(e,n,t){t instanceof PeriodicWave&&e.forEach(e=>{if(e&&e.length>n){if(!e[n])return;const a=e[n].generator;a instanceof OscillatorNode&&a.setPeriodicWave(t)}})},onKeyDown(e,n,t,a){const i=tn(e);if(Ze[i])return null;const s=r.createAudioEvent(n.id);return s.note=e.note,s.octave=e.octave,s.action=1,Ze[i]={event:s,instrument:n,recording:!0===t},Cn.noteOn(s,n),t&&an(s,a),s},onKeyUp(e,n){const t=tn(e),a=Ze[t];if(a){if(Cn.noteOff(a.event),a.recording){const e=r.createAudioEvent(a.instrument.id);e.action=2,an(e,n)}i.a.set(a.event,"recording",!1)}delete Ze[t]}};var nn=en;function tn(e){return`${e.note}${e.octave}`}function an(e,n){if(n.state.sequencer.playing){const t=n.state.song.activeSong,a=n.state.sequencer.activePattern,r=t.patterns[a],s=r.channels[n.state.editor.selectedInstrument],o=Math.round(n.getters.position.step/64*n.getters.amountOfSteps);l.setPosition(e,r,a,o,t.meta.tempo),e.recording=!0;const u=s[o];u&&e.mp&&(e.mp={...u.mp}),i.a.set(s,o,e),l.linkEvent(e,n.state.editor.selectedInstrument,t,n.state.editor.eventList)}else 2!==e.action&&n.commit("addEventAtPosition",{store:n,event:e,optData:{newEvent:!0}})}var rn=t(4),sn=t.n(rn);const ln=function(e,n={}){const t=n.bufferLen||4096;this.context=e.context,this.node=(this.context.createScriptProcessor||this.context.createJavaScriptNode).call(this.context,t,2,2);const a=new sn.a;a.onmessage=function(e){const n=e.data;i(n)},a.postMessage({command:"init",config:{sampleRate:this.context.sampleRate}});let i,r=!1;this.node.onaudioprocess=function(e){r&&a.postMessage({command:"record",buffer:[e.inputBuffer.getChannelData(0),e.inputBuffer.getChannelData(1)]})},this.configure=function(e){for(var t in e)n.hasOwnProperty(t)&&(n[t]=e[t])},this.record=function(){r=!0},this.stop=function(){r=!1},this.clear=function(){a.postMessage({command:"clear"})},this.getBuffer=function(e){i=e||n.callback,a.postMessage({command:"getBuffer"})},this.exportWAV=function(e,t){if(i=e||n.callback,t=t||n.type||"audio/wav",!i)throw new Error("Callback not set");a.postMessage({command:"exportWAV",type:t})},e.connect(this.node),this.node.connect(this.context.destination)};var on=ln;ln.forceDownload=function(e,n){const t=(window.URL||window.webkitURL).createObjectURL(e),a=window.document.createElement("a");a.href=t,a.download=n||"output.wav";const i=document.createEvent("Event");i.initEvent("click",!0,!0),a.dispatchEvent(i),(window.URL||window.webkitURL).revokeObjectURL(t)};const un={OCTAVE_SCALE:["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],OCTAVE:[261.626,277.183,293.665,311.127,329.628,349.228,369.994,391.995,415.305,440,466.164,493.883],getFrequency(e,n){let t,a=0,i=e.indexOf("b");if(i>-1&&(e=e.substr(i-1,1),a=-1),(i=e.indexOf("#"))>-1&&(e=e.substr(i-1,1),a=1),t=un.getOctaveIndex(e,a),4===n)return t;{const e=n-4;let a=Math.abs(e);for(i=0;i<a;++i)t*=e>0?2:.5;return t}},getPitchByFrequency(e){let n;const t=(Math.log(e)-Math.log(261.626))/Math.log(2)+4;let a=0|t,i=1200*(t-a);let r=50,s=2;if(i<50)n="C ";else if(i>=1150)n="C ",i-=1200,++a;else for(let e=1;e<=11;++e){if(i>=r&&i<r+100){n="C C#D D#E F F#G G#A A#B".charAt(s)+"C C#D D#E F F#G G#A A#B".charAt(s+1),i-=100*e;break}r+=100,s+=2}return{note:n,octave:a,cents:i}},getOctaveIndex(e,n){"number"!=typeof n&&(n=0);const t=un.OCTAVE,a=un.OCTAVE_SCALE;for(let i=0,r=t.length;i<r;++i)if(a[i]===e){let e=i+n;return e>r?t[0]:e<0?t[t.length-1]:t[e]}return NaN}};var fn=un,cn={SINE:{real:[0,-0,-.5,521e-6,-.001138,116e-6,-.001202,81e-6,-772e-6,116e-6,-752e-6,144e-6,-122e-6,27e-6,-623e-6,121e-6,-85e-6,55e-6,-175e-6,53e-6,-51e-6,52e-6,-117e-6,71e-6,-7e-5,33e-6,-42e-6,5e-5,-15e-6,25e-6,-4e-5,82e-6,-201e-6,49e-6,-25e-6,9e-6,-111e-6,81e-6,-42e-6,29e-6,-33e-6,24e-6,-33e-6,23e-6,-69e-6,82e-6,-83e-6,53e-6,-127e-6,45e-6,-8e-5,34e-6,-53e-6,29e-6,-6e-5,36e-6,-83e-6,98e-6,-102e-6,46e-6,-67e-6,71e-6,-89e-6,128e-6,-191e-6,195e-6,-266e-6,291e-6,-274e-6,245e-6,-198e-6,147e-6,-104e-6,79e-6,-65e-6,57e-6,-5e-5,45e-6,-41e-6,38e-6,-35e-6,33e-6,-3e-5,29e-6,-27e-6,26e-6,-24e-6,23e-6,-22e-6,21e-6,-2e-5,19e-6,-19e-6,18e-6,-17e-6,17e-6,-16e-6,16e-6,-15e-6,15e-6,-14e-6,14e-6,-13e-6,13e-6,-13e-6,12e-6,-12e-6,12e-6,-11e-6,11e-6,-11e-6,1e-5,-1e-5,1e-5,-1e-5,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-0,1e-6,-1eimag:[0,.002302,-3e-6,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-1e-6,0,-0,0,-1e-6,1e-6,-1e-6,1e-6,-2e-6,2e-6,-2e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,-1e},SAW:{real:[0,0,-.282095,0,-.199471,0,-.162868,0,-.141047,0,-.126157,0,-.115165,0,-.106622,0,-.099736,0,-.094032,0,-.089206,0,-.085055,0,-.081434,0,-.078239,0,-.075393,0,-.072837,0,-.070524,0,-.068418,0,-.06649,0,-.064717,0,-.063078,0,-.061558,0,-.060143,0,-.058821,0,-.057582,0,-.056419,0,-.055323,0,-.054289,0,-.053311,0,-.052384,0,-.051503,0,-.050666,0,-.049868,0,-.049106,0,-.048379,0,-.047683,0,-.047016,0,-.046376,0,-.045762,0,-.045171,0,-.044603,0,-.044056,0,-.043528,0,-.043019,0,-.042527,0,-.042052,0,-.041593,0,-.041148,0,-.040717,0,-.040299,0,-.039894,0,-.039501,0,-.03912,0,-.038749,0,-.038388,0,-.038038,0,-.037697,0,-.037364,0,-.037041,0,-.036726,0,-.036418,0,-.036119,0,-.035826,0,-.035541,0,-.035262,0,-.03499,0,-.034723,0,-.034463,0,-.034209,0,-.03396,0,-.033717,0,-.033478,0,-.033245,0,-.033017,0,-.032793,0,-.032574,0,-.032358,0,-.032148,0,-.031941,0,-.031738,0,-.031539,0,-.031344,0,-.031152,0,-.030964,0,-.030779,0,-.030597,0,-.030419,0,-.030244,0,-.030071,0,-.029902,0,-.029735,0,-.029572,0,-.02941,0,-.029252,0,-.029096,0,-.028942,0,-.028791,0,-.028642,0,-.028496,0,-.028352,0,-.028209,0,-.028069,0,-.027932,0,-.027796,0,-.027662,0,-.02753,0,-.027399,0,-.027271,0,-.027145,0,-.02702,0,-.026897,0,-.026775,0,-.026655,0,-.026537,0,-.026421,0,-.026305,0,-.026192,0,-.02608,0,-.025969,0,-.02586,0,-.025752,0,-.025645,0,-.02554,0,-.025436,0,-.025333,0,-.025231,0,-.025131,0,-.025032,0,-.024934,0,-.024837,0,-.024741,0,-.024647,0,-.024553,0,-.024461,0,-.024369,0,-.024279,0,-.024189,0,-.024101,0,-.024014,0,-.023927,0,-.023841,0,-.023757,0,-.023673,0,-.02359,0,-.023508,0,-.023427,0,-.023346,0,-.023267,0,-.023188,0,-.02311,0,-.023033,0,-.022957,0,-.022881,0,-.022806,0,-.022732,0,-.022658,0,-.022586,0,-.022514,0,-.022442,0,-.022372,0,-.022302,0,-.022232,0,-.022163,0,-.022095,0,-.022028,0,-.021961,0,-.021895,0,-.021829,0,-.021764,0,-.0217,0,-.021636,0,-.021572,0,-.02151,0,-.021447,0,-.021386,0,-.021324,0,-.021264,0,-.021204,0,-.021144,0,-.021085,0,-.021026,0,-.020968,0,-.02091,0,-.020853,0,-.020796,0,-.02074,0,-.020684,0,-.020629,0,-.020574,0,-.020519,0,-.020465,0,-.020412,0,-.020358,0,-.020306,0,-.020253,0,-.020201,0,-.02015,0,-.020098,0,-.020048,0,-.019997,0,-.019947,0,-.019897,0,-.019848,0,-.019799,0,-.019751,0,-.019702,0,-.019654,0,-.019607,0,-.01956,0,-.019513,0,-.019466,0,-.01942,0,-.019374,0,-.019329,0,-.019284,0,-.019239,0,-.019194,0,-.01915,0,-.019106,0,-.019062,0,-.019019,0,-.018976,0,-.018933,0,-.01889,0,-.018848,0,-.018806,0,-.018765,0,-.018723,0,-.018682,0,-.018641,0,-.018601,0,-.01856,0,-.01852,0,-.018481,0,-.018441,0,-.018402,0,-.018363,0,-.018324,0,-.018285,0,-.018247,0,-.018209,0,-.018171,0,-.018134,0,-.018096,0,-.018059,0,-.018022,0,-.017986,0,-.017949,0,-.017913,0,-.017877,0,-.017841,0,-.017806,0,-.01777,0,-.017735,0,-.0177,0,-.017665,0,-.017631,0,-.017597,0,-.017562,0,-.017529,0,-.017495,0,-.017461,0,-.017428,0,-.017395,0,-.017362,0,-.017329,0,-.017296,0,-.017264,0,-.017232,0,-.0172,0,-.017168,0,-.017136,0,-.017105,0,-.017073,0,-.017042,0,-.017011,0,-.01698,0,-.016949,0,-.016919,0,-.016889,0,-.016858,0,-.016828,0,-.016798,0,-.016769,0,-.016739,0,-.01671,0,-.016681,0,-.016652,0,-.016623,0,-.016594,0,-.016565,0,-.016537,0,-.016508,0,-.01648,0,-.016452,0,-.016424,0,-.016396,0,-.016369,0,-.016341,0,-.016314,0,-.016287,0,-.01626,0,-.016233,0,-.016206,0,-.016179,0,-.016153,0,-.016126,0,-.0161,0,-.016074,0,-.016048,0,-.016022,0,-.015996,0,-.01597,0,-.015945,0,-.01592,0,-.015894,0,-.015869,0,-.015844,0,-.015819,0,-.015794,0,-.01577,0,-.015745,0,-.015721,0,-.015696,0,-.015672,0,-.015648,0,-.015624,0,-.0156,0,-.015576,0,-.015552,0,-.015529,0,-.015505,0,-.015482,0,-.015459,0,-.015436,0,-.015412,0,-.01539,0,-.015367,0,-.015344,0,-.015321,0,-.015299,0,-.015276,0,-.015254,0,-.015232,0,-.01521,0,-.015187,0,-.015166,0,-.015144,0,-.015122,0,-.0151,0,-.015079,0,-.015057,0,-.015036,0,-.015014,0,-.014993,0,-.014972,0,-.014951,0,-.01493,0,-.014909,0,-.014888,0,-.014868,0,-.014847,0,-.014827,0,-.014806,0,-.014786,0,-.014766,0,-.014745,0,-.014725,0,-.014705,0,-.014685,0,-.014665,0,-.014646,0,-.014626,0,-.014606,0,-.014587,0,-.014567,0,-.014548,0,-.014529,0,-.014509,0,-.01449,0,-.014471,0,-.014452,0,-.014433,0,-.014414,0,-.014396,0,-.014377,0,-.014358,0,-.01434,0,-.014321,0,-.014303,0,-.014284,0,-.014266,0,-.014248,0,-.01423,0,-.014212,0,-.014194,0,-.014176,0,-.014158,0,-.01414,0,-.014122,0,-.014105,0,-.014087,0,-.01407,0,-.014052,0,-.014035,0,-.014017,0,-.014,0,-.013983,0,-.013966,0,-.013949,0,-.013932,0,-.013915,0,-.013898,0,-.013881,0,-.013864,0,-.013847,0,-.013831,0,-.013814,0,-.013798,0,-.013781,0,-.013765,0,-.013748,0,-.013732,0,-.013716,0,-.0137,0,-.013684,0,-.013668,0,-.013652,0,-.013636,0,-.01362,0,-.013604,0,-.013588,0,-.013572,0,-.013557,0,-.013541,0,-.013525,0,-.01351,0,-.013494,0,-.013479,0,-.013464,0,-.013448,0,-.013433,0,-.013418,0,-.013403,0,-.013388,0,-.013373,0,-.013358,0,-.013343,0,-.013328,0,-.013313,0,-.013298,0,-.013283,0,-.013269,0,-.013254,0,-.013239,0,-.013225,0,-.01321,0,-.013196,0,-.013181,0,-.013167,0,-.013153,0,-.013138,0,-.013124,0,-.01311,0,-.013096,0,-.013082,0,-.013068,0,-.013054,0,-.01304,0,-.013026,0,-.013012,0,-.012998,0,-.012984,0,-.012971,0,-.012957,0,-.012943,0,-.01293,0,-.012916,0,-.012903,0,-.012889,0,-.012876,0,-.012862,0,-.012849,0,-.012836,0,-.012822,0,-.012809,0,-.012796,0,-.012783,0,-.01277,0,-.012757,0,-.012744,0,-.012731,0,-.012718,0,-.012705,0,-.012692,0,-.012679,0,-.012666,0,-.012654,0,-.012641,0,-.012628,0,-.012616,0,-.012603,0,-.012591,0,-.012578,0,-.012566,0,-.012553,0,-.012541,0,-.012528,0,-.012516,0,-.012504,0,-.012491,0,-.012479,0,-.012467,0,-.012455,0,-.012443,0,-.012431,0,-.012419,0,-.012407,0,-.012395,0,-.012383,0,-.012371,0,-.012359,0,-.012347,0,-.012335,0,-.012323,0,-.012312,0,-.0123,0,-.012288,0,-.012277,0,-.012265,0,-.012253,0,-.012242,0,-.01223,0,-.012219,0,-.012207,0,-.012196,0,-.012185,0,-.012173,0,-.012162,0,-.012151,0,-.012139,0,-.012128,0,-.012117,0,-.012106,0,-.012095,0,-.012084,0,-.012073,0,-.012062,0,-.01205,0,-.01204,0,-.012029,0,-.012018,0,-.012007,0,-.011996,0,-.011985,0,-.011974,0,-.011963,0,-.011953,0,-.011942,0,-.011931,0,-.011921,0,-.01191,0,-.011899,0,-.011889,0,-.011878,0,-.011868,0,-.011857,0,-.011847,0,-.011836,0,-.011826,0,-.011816,0,-.011805,0,-.011795,0,-.011785,0,-.011774,0,-.011764,0,-.011754,0,-.011744,0,-.011734,0,-.011723,0,-.011713,0,-.011703,0,-.011693,0,-.011683,0,-.011673,0,-.011663,0,-.011653,0,-.011643,0,-.011633,0,-.011624,0,-.011614,0,-.011604,0,-.011594,0,-.011584,0,-.011574,0,-.011565,0,-.011555,0,-.011545,0,-.011536,0,-.011526,0,-.011516,0,-.011507,0,-.011497,0,-.011488,0,-.011478,0,-.011469,0,-.011459,0,-.01145,0,-.01144,0,-.011431,0,-.011422,0,-.011412,0,-.011403,0,-.011394,0,-.011384,0,-.011375,0,-.011366,0,-.011357,0,-.011348,0,-.011338,0,-.011329,0,-.01132,0,-.011311,0,-.011302,0,-.011293,0,-.011284,0,-.011275,0,-.011266,0,-.011257,0,-.011248,0,-.011239,0,-.01123,0,-.011221,0,-.011212,0,-.011203,0,-.011195,0,-.011186,0,-.011177,0,-.011168,0,-.011159,0,-.011151,0,-.011142,0,-.011133,0,-.011125,0,-.011116,0,-.011107,0,-.011099,0,-.01109,0,-.011082,0,-.011073,0,-.011065,0,-.011056,0,-.011048,0,-.011039,0,-.011031,0,-.011022,0,-.011014,0,-.011006,0,-.010997,0,-.010989,0,-.010981,0,-.010972,0,-.010964,0,-.010956,0,-.010947,0,-.010939,0,-.010931,0,-.010923,0,-.010915,0,-.010906,0,-.010898,0,-.01089,0,-.010882,0,-.010874,0,-.010866,0,-.010858,0,-.01085,0,-.010842,0,-.010834,0,-.010826,0,-.010818,0,-.01081,0,-.010802,0,-.010794,0,-.010786,0,-.010778,0,-.01077,0,-.010763,0,-.010755,0,-.010747,0,-.010739,0,-.010731,0,-.010724,0,-.010716,0,-.010708,0,-.0107,0,-.010693,0,-.010685,0,-.010677,0,-.01067,0,-.010662,0,-.010655,0,-.010647,0,-.010639,0,-.010632,0,-.010624,0,-.010617,0,-.010609,0,-.010602,0,-.010594,0,-.010587,0,-.010579,0,-.010572,0,-.010565,0,-.010557,0,-.01055,0,-.010542,0,-.010535,0,-.010528,0,-.01052,0,-.010513,0,-.010506,0,-.010498,0,-.010491,0,-.010484,0,-.010477,0,-.01047,0,-.010462,0,-.010455,0,-.010448,0,-.010441,0,-.010434,0,-.010427,0,-.010419,0,-.010412,0,-.010405,0,-.010398,0,-.010391,0,-.010384,0,-.010377,0,-.01037,0,-.010363,0,-.010356,0,-.010349,0,-.010342,0,-.010335,0,-.010328,0,-.010321,0,-.010314,0,-.010308,0,-.010301,0,-.010294,0,-.010287,0,-.01028,0,-.010273,0,-.010266,0,-.01026,0,-.010253,0,-.010246,0,-.010239,0,-.010233,0,-.010226,0,-.010219,0,-.010213,0,-.010206,0,-.010199,0,-.010192,0,-.010186,0,-.010179,0,-.010173,0,-.010166,0,-.010159,0,-.010153,0,-.010146,0,-.01014,0,-.010133,0,-.010127,0,-.01012,0,-.010114,0,-.010107,0,-.010101,0,-.010094,0,-.010088,0,-.010081,0,-.010075,0,-.010068,0,-.010062,0,-.010056,0,-.010049,0,-.010043,0,-.010036,0,-.01003,0,-.010024,0,-.010017,0,-.010011,0,-.010005,0,-.009999,0,-.009992,0,-.009986,0,-.00998,0,-.009974,0,-.009967,0,-.009961,0,-.009955,0,-.009949,0,-.009943,0,-.009936,0,-.00993,0,-.009924,0,-.009918,0,-.009912,0,-.009906,0,-.0099,0,-.009893,0,-.009887,0,-.009881,0,-.009875,0,-.009869,0,-.009863,0,-.009857,0,-.009851,0,-.009845,0,-.009839,0,-.009833,0,-.009827,0,-.009821,0,-.009815,0,-.009809,0,-.009803,0,-.009798,0,-.009792,0,-.009786,0,-.00978,0,-.009774,0,-.009768,0,-.009762,0,-.009756,0,-.009751,0,-.009745,0,-.009739,0,-.009733,0,-.009727,0,-.009722,0,-.009716,0,-.00971,0,-.009704,0,-.009699,0,-.009693,0,-.009687,0,-.009681,0,-.009676,0,-.00967,0,-.009664,0,-.009659,0,-.009653,0,-.009647,0,-.009642,0,-.009636,0,-.009631,0,-.009625,0,-.009619,0,-.009614,0,-.009608,0,-.009603,0,-.009597,0,-.009592,0,-.009586,0,-.00958,0,-.009575,0,-.009569,0,-.009564,0,-.009558,0,-.009553,0,-.009547,0,-.009542,0,-.009537,0,-.009531,0,-.009526,0,-.00952,0,-.009515,0,-.009509,0,-.009504,0,-.009499,0,-.009493,0,-.009488,0,-.009483,0,-.009477,0,-.009472,0,-.009466,0,-.009461,0,-.009456,0,-.009451,0,-.009445,0,-.00944,0,-.009435,0,-.009429,0,-.009424,0,-.009419,0,-.009414,0,-.009408,0,-.009403,0,-.009398,0,-.009393,0,-.009388,0,-.009382,0,-.009377,0,-.009372,0,-.009367,0,-.009362,0,-.009356,0,-.009351,0,-.009346,0,-.009341,0,-.009336,0,-.009331,0,-.009326,0,-.009321,0,-.009316,0,-.009311,0,-.009305,0,-.0093,0,-.009295,0,-.00929,0,-.009285,0,-.00928,0,-.009275,0,-.00927,0,-.009265,0,-.00926,0,-.009255,0,-.00925,0,-.009245,0,-.00924,0,-.009235,0,-.00923,0,-.009225,0,-.009221,0,-.009216,0,-.009211,0,-.009206,0,-.009201,0,-.009196,0,-.009191,0,-.009186,0,-.009181,0,-.009177,0,-.009172,0,-.009167,0,-.009162,0,-.009157,0,-.009152,0,-.009148,0,-.009143,0,-.009138,0,-.009133,0,-.009128,0,-.009124,0,-.009119,0,-.009114,0,-.009109,0,-.009105,0,-.0091,0,-.009095,0,-.00909,0,-.009086,0,-.009081,0,-.009076,0,-.009072,0,-.009067,0,-.009062,0,-.009058,0,-.009053,0,-.009048,0,-.009044,0,-.009039,0,-.009034,0,-.00903,0,-.009025,0,-.00902,0,-.009016,0,-.009011,0,-.009007,0,-.009002,0,-.008997,0,-.008993,0,-.008988,0,-.008984,0,-.008979,0,-.008975,0,-.00897,0,-.008966,0,-.008961,0,-.008957,0,-.008952,0,-.008948,0,-.008943,0,-.008939,0,-.008934,0,-.00893,0,-.008925,0,-.008921,0,-.008916,0,-.008912,0,-.008907,0,-.008903,0,-.008898,0,-.008894,0,-.00889,0,-.008885,0,-.008881,0,-.008876,0,-.008872,0,-.008868,0,-.008863,0,-.008859,0,-.008854,0,-.00885,0,-.008846,0,-.008841,0,-.008837,0,-.008833,0,-.008828,0,-.008824,0,-.00882,0],imag:[0,.398942,-0,.230329,-0,.178412,-0,.150786,-0,.132981,-0,.120286,-0,.110647,-0,.103006,-0,.096758,-0,.091524,-0,.087056,-0,.083185,-0,.079788,-0,.076776,-0,.074082,-0,.071652,-0,.069447,-0,.067434,-0,.065586,-0,.063882,-0,.062304,-0,.060838,-0,.059471,-0,.058192,-0,.056992,-0,.055863,-0,.054799,-0,.053793,-0,.052841,-0,.051938,-0,.051079,-0,.050262,-0,.049483,-0,.048739,-0,.048027,-0,.047346,-0,.046693,-0,.046066,-0,.045464,-0,.044885,-0,.044327,-0,.04379,-0,.043271,-0,.042771,-0,.042288,-0,.041821,-0,.041368,-0,.040931,-0,.040506,-0,.040095,-0,.039696,-0,.039309,-0,.038933,-0,.038567,-0,.038212,-0,.037866,-0,.037529,-0,.037202,-0,.036882,-0,.036571,-0,.036267,-0,.035971,-0,.035682,-0,.0354,-0,.035125,-0,.034856,-0,.034593,-0,.034335,-0,.034084,-0,.033838,-0,.033597,-0,.033361,-0,.03313,-0,.032904,-0,.032683,-0,.032465,-0,.032253,-0,.032044,-0,.031839,-0,.031638,-0,.031441,-0,.031248,-0,.031058,-0,.030871,-0,.030688,-0,.030508,-0,.030331,-0,.030157,-0,.029986,-0,.029818,-0,.029653,-0,.029491,-0,.029331,-0,.029174,-0,.029019,-0,.028866,-0,.028716,-0,.028569,-0,.028423,-0,.02828,-0,.028139,-0,.028,-0,.027863,-0,.027728,-0,.027595,-0,.027464,-0,.027335,-0,.027208,-0,.027082,-0,.026958,-0,.026836,-0,.026715,-0,.026596,-0,.026479,-0,.026363,-0,.026248,-0,.026136,-0,.026024,-0,.025914,-0,.025805,-0,.025698,-0,.025592,-0,.025487,-0,.025384,-0,.025282,-0,.025181,-0,.025081,-0,.024983,-0,.024885,-0,.024789,-0,.024694,-0,.0246,-0,.024507,-0,.024415,-0,.024324,-0,.024234,-0,.024145,-0,.024057,-0,.02397,-0,.023884,-0,.023799,-0,.023715,-0,.023631,-0,.023549,-0,.023467,-0,.023386,-0,.023306,-0,.023227,-0,.023149,-0,.023071,-0,.022995,-0,.022919,-0,.022843,-0,.022769,-0,.022695,-0,.022622,-0,.02255,-0,.022478,-0,.022407,-0,.022336,-0,.022267,-0,.022198,-0,.022129,-0,.022062,-0,.021994,-0,.021928,-0,.021862,-0,.021797,-0,.021732,-0,.021668,-0,.021604,-0,.021541,-0,.021478,-0,.021416,-0,.021355,-0,.021294,-0,.021234,-0,.021174,-0,.021114,-0,.021055,-0,.020997,-0,.020939,-0,.020882,-0,.020825,-0,.020768,-0,.020712,-0,.020656,-0,.020601,-0,.020547,-0,.020492,-0,.020438,-0,.020385,-0,.020332,-0,.020279,-0,.020227,-0,.020175,-0,.020124,-0,.020073,-0,.020022,-0,.019972,-0,.019922,-0,.019873,-0,.019824,-0,.019775,-0,.019726,-0,.019678,-0,.019631,-0,.019583,-0,.019536,-0,.01949,-0,.019443,-0,.019397,-0,.019352,-0,.019306,-0,.019261,-0,.019216,-0,.019172,-0,.019128,-0,.019084,-0,.01904,-0,.018997,-0,.018954,-0,.018912,-0,.018869,-0,.018827,-0,.018785,-0,.018744,-0,.018703,-0,.018662,-0,.018621,-0,.018581,-0,.01854,-0,.018501,-0,.018461,-0,.018421,-0,.018382,-0,.018343,-0,.018305,-0,.018266,-0,.018228,-0,.01819,-0,.018153,-0,.018115,-0,.018078,-0,.018041,-0,.018004,-0,.017967,-0,.017931,-0,.017895,-0,.017859,-0,.017823,-0,.017788,-0,.017753,-0,.017718,-0,.017683,-0,.017648,-0,.017614,-0,.017579,-0,.017545,-0,.017512,-0,.017478,-0,.017445,-0,.017411,-0,.017378,-0,.017345,-0,.017313,-0,.01728,-0,.017248,-0,.017216,-0,.017184,-0,.017152,-0,.01712,-0,.017089,-0,.017058,-0,.017026,-0,.016996,-0,.016965,-0,.016934,-0,.016904,-0,.016873,-0,.016843,-0,.016813,-0,.016784,-0,.016754,-0,.016725,-0,.016695,-0,.016666,-0,.016637,-0,.016608,-0,.016579,-0,.016551,-0,.016523,-0,.016494,-0,.016466,-0,.016438,-0,.01641,-0,.016383,-0,.016355,-0,.016328,-0,.0163,-0,.016273,-0,.016246,-0,.016219,-0,.016193,-0,.016166,-0,.016139,-0,.016113,-0,.016087,-0,.016061,-0,.016035,-0,.016009,-0,.015983,-0,.015958,-0,.015932,-0,.015907,-0,.015882,-0,.015857,-0,.015832,-0,.015807,-0,.015782,-0,.015757,-0,.015733,-0,.015708,-0,.015684,-0,.01566,-0,.015636,-0,.015612,-0,.015588,-0,.015564,-0,.015541,-0,.015517,-0,.015494,-0,.01547,-0,.015447,-0,.015424,-0,.015401,-0,.015378,-0,.015355,-0,.015333,-0,.01531,-0,.015288,-0,.015265,-0,.015243,-0,.015221,-0,.015198,-0,.015176,-0,.015155,-0,.015133,-0,.015111,-0,.015089,-0,.015068,-0,.015046,-0,.015025,-0,.015004,-0,.014983,-0,.014962,-0,.014941,-0,.01492,-0,.014899,-0,.014878,-0,.014857,-0,.014837,-0,.014816,-0,.014796,-0,.014776,-0,.014755,-0,.014735,-0,.014715,-0,.014695,-0,.014675,-0,.014656,-0,.014636,-0,.014616,-0,.014597,-0,.014577,-0,.014558,-0,.014538,-0,.014519,-0,.0145,-0,.014481,-0,.014462,-0,.014443,-0,.014424,-0,.014405,-0,.014386,-0,.014368,-0,.014349,-0,.01433,-0,.014312,-0,.014294,-0,.014275,-0,.014257,-0,.014239,-0,.014221,-0,.014203,-0,.014185,-0,.014167,-0,.014149,-0,.014131,-0,.014114,-0,.014096,-0,.014078,-0,.014061,-0,.014043,-0,.014026,-0,.014009,-0,.013992,-0,.013974,-0,.013957,-0,.01394,-0,.013923,-0,.013906,-0,.013889,-0,.013873,-0,.013856,-0,.013839,-0,.013823,-0,.013806,-0,.013789,-0,.013773,-0,.013757,-0,.01374,-0,.013724,-0,.013708,-0,.013692,-0,.013676,-0,.01366,-0,.013644,-0,.013628,-0,.013612,-0,.013596,-0,.01358,-0,.013564,-0,.013549,-0,.013533,-0,.013518,-0,.013502,-0,.013487,-0,.013471,-0,.013456,-0,.013441,-0,.013425,-0,.01341,-0,.013395,-0,.01338,-0,.013365,-0,.01335,-0,.013335,-0,.01332,-0,.013305,-0,.013291,-0,.013276,-0,.013261,-0,.013247,-0,.013232,-0,.013218,-0,.013203,-0,.013189,-0,.013174,-0,.01316,-0,.013146,-0,.013131,-0,.013117,-0,.013103,-0,.013089,-0,.013075,-0,.013061,-0,.013047,-0,.013033,-0,.013019,-0,.013005,-0,.012991,-0,.012978,-0,.012964,-0,.01295,-0,.012937,-0,.012923,-0,.012909,-0,.012896,-0,.012883,-0,.012869,-0,.012856,-0,.012842,-0,.012829,-0,.012816,-0,.012803,-0,.01279,-0,.012776,-0,.012763,-0,.01275,-0,.012737,-0,.012724,-0,.012711,-0,.012698,-0,.012686,-0,.012673,-0,.01266,-0,.012647,-0,.012635,-0,.012622,-0,.012609,-0,.012597,-0,.012584,-0,.012572,-0,.012559,-0,.012547,-0,.012534,-0,.012522,-0,.01251,-0,.012497,-0,.012485,-0,.012473,-0,.012461,-0,.012449,-0,.012437,-0,.012425,-0,.012413,-0,.012401,-0,.012389,-0,.012377,-0,.012365,-0,.012353,-0,.012341,-0,.012329,-0,.012317,-0,.012306,-0,.012294,-0,.012282,-0,.012271,-0,.012259,-0,.012248,-0,.012236,-0,.012225,-0,.012213,-0,.012202,-0,.01219,-0,.012179,-0,.012168,-0,.012156,-0,.012145,-0,.012134,-0,.012123,-0,.012111,-0,.0121,-0,.012089,-0,.012078,-0,.012067,-0,.012056,-0,.012045,-0,.012034,-0,.012023,-0,.012012,-0,.012001,-0,.01199,-0,.01198,-0,.011969,-0,.011958,-0,.011947,-0,.011937,-0,.011926,-0,.011915,-0,.011905,-0,.011894,-0,.011884,-0,.011873,-0,.011863,-0,.011852,-0,.011842,-0,.011831,-0,.011821,-0,.01181,-0,.0118,-0,.01179,-0,.01178,-0,.011769,-0,.011759,-0,.011749,-0,.011739,-0,.011729,-0,.011718,-0,.011708,-0,.011698,-0,.011688,-0,.011678,-0,.011668,-0,.011658,-0,.011648,-0,.011638,-0,.011628,-0,.011619,-0,.011609,-0,.011599,-0,.011589,-0,.011579,-0,.01157,-0,.01156,-0,.01155,-0,.011541,-0,.011531,-0,.011521,-0,.011512,-0,.011502,-0,.011493,-0,.011483,-0,.011474,-0,.011464,-0,.011455,-0,.011445,-0,.011436,-0,.011426,-0,.011417,-0,.011408,-0,.011398,-0,.011389,-0,.01138,-0,.011371,-0,.011361,-0,.011352,-0,.011343,-0,.011334,-0,.011325,-0,.011316,-0,.011306,-0,.011297,-0,.011288,-0,.011279,-0,.01127,-0,.011261,-0,.011252,-0,.011243,-0,.011234,-0,.011226,-0,.011217,-0,.011208,-0,.011199,-0,.01119,-0,.011181,-0,.011173,-0,.011164,-0,.011155,-0,.011146,-0,.011138,-0,.011129,-0,.01112,-0,.011112,-0,.011103,-0,.011095,-0,.011086,-0,.011077,-0,.011069,-0,.01106,-0,.011052,-0,.011043,-0,.011035,-0,.011027,-0,.011018,-0,.01101,-0,.011001,-0,.010993,-0,.010985,-0,.010976,-0,.010968,-0,.01096,-0,.010952,-0,.010943,-0,.010935,-0,.010927,-0,.010919,-0,.01091,-0,.010902,-0,.010894,-0,.010886,-0,.010878,-0,.01087,-0,.010862,-0,.010854,-0,.010846,-0,.010838,-0,.01083,-0,.010822,-0,.010814,-0,.010806,-0,.010798,-0,.01079,-0,.010782,-0,.010774,-0,.010767,-0,.010759,-0,.010751,-0,.010743,-0,.010735,-0,.010728,-0,.01072,-0,.010712,-0,.010704,-0,.010697,-0,.010689,-0,.010681,-0,.010674,-0,.010666,-0,.010658,-0,.010651,-0,.010643,-0,.010636,-0,.010628,-0,.010621,-0,.010613,-0,.010606,-0,.010598,-0,.010591,-0,.010583,-0,.010576,-0,.010568,-0,.010561,-0,.010553,-0,.010546,-0,.010539,-0,.010531,-0,.010524,-0,.010517,-0,.010509,-0,.010502,-0,.010495,-0,.010488,-0,.01048,-0,.010473,-0,.010466,-0,.010459,-0,.010452,-0,.010444,-0,.010437,-0,.01043,-0,.010423,-0,.010416,-0,.010409,-0,.010402,-0,.010395,-0,.010388,-0,.010381,-0,.010374,-0,.010367,-0,.01036,-0,.010353,-0,.010346,-0,.010339,-0,.010332,-0,.010325,-0,.010318,-0,.010311,-0,.010304,-0,.010297,-0,.01029,-0,.010284,-0,.010277,-0,.01027,-0,.010263,-0,.010256,-0,.01025,-0,.010243,-0,.010236,-0,.010229,-0,.010223,-0,.010216,-0,.010209,-0,.010202,-0,.010196,-0,.010189,-0,.010183,-0,.010176,-0,.010169,-0,.010163,-0,.010156,-0,.01015,-0,.010143,-0,.010136,-0,.01013,-0,.010123,-0,.010117,-0,.01011,-0,.010104,-0,.010097,-0,.010091,-0,.010084,-0,.010078,-0,.010072,-0,.010065,-0,.010059,-0,.010052,-0,.010046,-0,.01004,-0,.010033,-0,.010027,-0,.010021,-0,.010014,-0,.010008,-0,.010002,-0,.009995,-0,.009989,-0,.009983,-0,.009977,-0,.00997,-0,.009964,-0,.009958,-0,.009952,-0,.009946,-0,.009939,-0,.009933,-0,.009927,-0,.009921,-0,.009915,-0,.009909,-0,.009903,-0,.009897,-0,.00989,-0,.009884,-0,.009878,-0,.009872,-0,.009866,-0,.00986,-0,.009854,-0,.009848,-0,.009842,-0,.009836,-0,.00983,-0,.009824,-0,.009818,-0,.009812,-0,.009806,-0,.009801,-0,.009795,-0,.009789,-0,.009783,-0,.009777,-0,.009771,-0,.009765,-0,.009759,-0,.009754,-0,.009748,-0,.009742,-0,.009736,-0,.00973,-0,.009725,-0,.009719,-0,.009713,-0,.009707,-0,.009701,-0,.009696,-0,.00969,-0,.009684,-0,.009679,-0,.009673,-0,.009667,-0,.009662,-0,.009656,-0,.00965,-0,.009645,-0,.009639,-0,.009633,-0,.009628,-0,.009622,-0,.009617,-0,.009611,-0,.009605,-0,.0096,-0,.009594,-0,.009589,-0,.009583,-0,.009578,-0,.009572,-0,.009567,-0,.009561,-0,.009556,-0,.00955,-0,.009545,-0,.009539,-0,.009534,-0,.009528,-0,.009523,-0,.009518,-0,.009512,-0,.009507,-0,.009501,-0,.009496,-0,.009491,-0,.009485,-0,.00948,-0,.009474,-0,.009469,-0,.009464,-0,.009458,-0,.009453,-0,.009448,-0,.009443,-0,.009437,-0,.009432,-0,.009427,-0,.009421,-0,.009416,-0,.009411,-0,.009406,-0,.009401,-0,.009395,-0,.00939,-0,.009385,-0,.00938,-0,.009375,-0,.009369,-0,.009364,-0,.009359,-0,.009354,-0,.009349,-0,.009344,-0,.009339,-0,.009333,-0,.009328,-0,.009323,-0,.009318,-0,.009313,-0,.009308,-0,.009303,-0,.009298,-0,.009293,-0,.009288,-0,.009283,-0,.009278,-0,.009273,-0,.009268,-0,.009263,-0,.009258,-0,.009253,-0,.009248,-0,.009243,-0,.009238,-0,.009233,-0,.009228,-0,.009223,-0,.009218,-0,.009213,-0,.009208,-0,.009203,-0,.009198,-0,.009194,-0,.009189,-0,.009184,-0,.009179,-0,.009174,-0,.009169,-0,.009164,-0,.00916,-0,.009155,-0,.00915,-0,.009145,-0,.00914,-0,.009136,-0,.009131,-0,.009126,-0,.009121,-0,.009116,-0,.009112,-0,.009107,-0,.009102,-0,.009097,-0,.009093,-0,.009088,-0,.009083,-0,.009079,-0,.009074,-0,.009069,-0,.009065,-0,.00906,-0,.009055,-0,.009051,-0,.009046,-0,.009041,-0,.009037,-0,.009032,-0,.009027,-0,.009023,-0,.009018,-0,.009013,-0,.009009,-0,.009004,-0,.009,-0,.008995,-0,.008991,-0,.008986,-0,.008981,-0,.008977,-0,.008972,-0,.008968,-0,.008963,-0,.008959,-0,.008954,-0,.00895,-0,.008945,-0,.008941,-0,.008936,-0,.008932,-0,.008927,-0,.008923,-0,.008918,-0,.008914,-0,.008909,-0,.008905,-0,.008901,-0,.008896,-0,.008892,-0,.008887,-0,.008883,-0,.008879,-0,.008874,-0,.00887,-0,.008865,-0,.008861,-0,.008857,-0,.008852,-0,.008848,-0,.008844,-0,.008839,-0,.008835,-0,.008831,-0,.008826,-0,.008822,-0,.008818]},TRIANGLE:{real:[0,.810569,-0,.090063,-0,.032423,-0,.016542,-0,.010007,-0,.006699,-0,.004796,-0,.003603,-0,.002805,-0,.002245,-0,.001838,-0,.001532,-0,.001297,0,.001112,-0,964e-6,-0,843e-6,-0,744e-6,0,662e-6,-0,592e-6,-0,533e-6,-0,482e-6,0,438e-6,-0,4e-4,-0,367e-6,-0,338e-6,0,312e-6,0,289e-6,-0,268e-6,-0,249e-6,0,233e-6,-0,218e-6,-0,204e-6,-0,192e-6,-0,181e-6,0,17e-5,-0,161e-6,-0,152e-6,-0,144e-6,-0,137e-6,-0,13e-5,-0,124e-6,-0,118e-6,0,112e-6,-0,107e-6,-0,102e-6,-0,98e-6,-0,94e-6,0,9e-5,-0,86e-6,-0,83e-6,0,79e-6,-0,76e-6,0,74e-6,-0,71e-6,-0,68e-6,0,66e-6,-0,63e-6,-0,61e-6,0,59e-6,-0,57e-6,-0,55e-6,-0,54e-6,-0,52e-6,0,5e-5,-0,49e-6,-0,47e-6,-0,46e-6,-0,44e-6,0,43e-6,-0,42e-6,-0,41e-6,0,4e-5,-0,39e-6,-0,38e-6,-0,37e-6,-0,36e-6,-0,35e-6,-0,34e-6,-0,33e-6,0,32e-6,-0,31e-6,-0,31e-6,-0,3e-5,0,29e-6,0,28e-6,-0,28e-6,-0,27e-6,-0,26e-6,-0,26e-6,0,25e-6,-0,25e-6,-0,24e-6,-0,24e-6,-0,23e-6,0,23e-6,-0,22e-6,-0,22e-6,-0,21e-6,-0,21e-6,0,2e-5,0,2e-5,-0,2e-5,-0,19e-6,-0,19e-6,0,19e-6,0,18e-6,-0,18e-6,-0,18e-6,-0,17e-6,-0,17e-6,0,17e-6,-0,16e-6,-0,16e-6,-0,16e-6,-0,15e-6,0,15e-6,0,15e-6,-0,15e-6,-0,14e-6,-0,14e-6,-0,14e-6,0,14e-6,-0,14e-6,-0,13e-6,-0,13e-6,-0,13e-6,0,13e-6,-0,12e-6,-0,12e-6,-0,12e-6,-0,12e-6,0,12e-6,-0,12e-6,-0,11e-6,-0,11e-6,-0,11e-6,0,11e-6,0,11e-6,-0,11e-6,-0,1e-5,-0,1e-5,-0,1e-5,0,1e-5,-0,1e-5,-0,1e-5,-0,1e-5,-0,9e-6,0,9e-6,-0,9e-6,-0,9e-6,-0,9e-6,-0,9e-6,-0,9e-6,-0,9e-6,-0,8e-6,-0,8e-6,-0,8e-6,-0,8e-6,0,8e-6,-0,8e-6,-0,8e-6,-0,8e-6,-0,8e-6,-0,8e-6,-0,7e-6,-0,7e-6,0,7e-6,0,7e-6,0,7e-6,-0,7e-6,-0,7e-6,-0,7e-6,-0,7e-6,-0,7e-6,-0,7e-6,-0,7e-6,-0,7e-6,0,6e-6,0,6e-6,0,6e-6,-0,6e-6,-0,6e-6,-0,6e-6,-0,6e-6,-0,6e-6,-0,6e-6,-0,6e-6,0,6e-6,0,6e-6,0,6e-6,-0,6e-6,-0,6e-6,-0,5e-6,-0,5e-6,-0,5e-6,-0,5e-6,-0,5e-6,-0,5e-6,0,5e-6,0,5e-6,0,5e-6,-0,5e-6,-0,5e-6,-0,5e-6,-0,5e-6,-0,5e-6,-0,5e-6,-0,5e-6,0,5e-6,0,5e-6,0,5e-6,-0,5e-6,-0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,0,4e-6,0,4e-6,0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,0,4e-6,0,4e-6,0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,-0,4e-6,0,3e-6,0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,0,3e-6,0,3e-6,0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,0,3e-6,0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,0,3e-6,0,3e-6,0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,-0,3e-6,0,3e-6,0,3e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,0,2e-6,0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,0,2e-6,0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,0,2e-6,-0,2e-6,0,2e-6,-0,2e-6,0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,0,2e-6,-0,2e-6,0,2e-6,-0,2e-6,0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,0,2e-6,-0,2e-6,0,2e-6,-0,2e-6,0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,-0,2e-6,0,2e-6,-0,2e-6,0,2e-6,-0,2e-6,0,2e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,1e-6,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0],imag:[0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0,0,0,0,-0,0,-0,0,0,0,-0,0,-0,0,-0]},SQUARE:{real:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,-.46267,-0,.514476,0,-.222225,-0,.198434,0,-.131464,-0,.122448,0,-.093145,-0,.088485,0,-.072092,-0,.069258,0,-.058792,-0,.056891,0,-.049633,0,.048269,0,-.042941,-0,.041916,0,-.037839,0,.03704,0,-.03382,-0,.03318,0,-.030572,0,.030049,0,-.027894,-0,.027457,0,-.025647,0,.025277,-0,-.023735,-0,.023418,0,-.022088,0,.021813,0,-.020655,-0,.020414,0,-.019396,-0,.019184,-0,-.018282,-0,.018094,0,-.01729,-0,.017121,0,-.016399,-0,.016247,0,-.015595,-0,.015458,-0,-.014867,-0,.014742,0,-.014204,-0,.01409,0,-.013597,0,.013492,0,-.01304,-0,.012944,-0,-.012527,-0,.012438,-0,-.012053,-0,.01197,0,-.011613,0,.011536,0,-.011204,-0,.011133,-0,-.010823,-0,.010757,0,-.010467,-0,.010405,0,-.010134,0,.010076,0,-.009821,-0,.009767,0,-.009527,-0,.009476,-0,-.009251,-0,.009202,0,-.008989,0,.008943,0,-.008742,-0,.008699,0,-.008509,-0,.008468,0,-.008287,-0,.008248,0,-.008077,0,.00804,0,-.007877,-0,.007842,0,-.007687,0,.007653,-0,-.007506,-0,.007474,0,-.007333,-0,.007302,0,-.007168,0,.007138,0,-.00701,-0,.006982,0,-.006859,-0,.006832,-0,-.006714,-0,.006688,0,-.006575,-0,.006551,0,-.006442,0,.006419,-0,-.006314,-0,.006292,0,-.006192,-0,.00617,-0,-.006073,0,.006053,0,-.00596,-0,.00594,0,-.00585,-0,.005831,-0,-.005745,-0,.005726,0,-.005643,-0,.005625,0,-.005545,0,.005527,-0,-.00545,-0,.005433,0,-.005358,-0,.005342,0,-.005269,0,.005253,0,-.005183,-0,.005168,0,-.0051,-0,.005086,-0,-.00502,-0,.005006,0,-.004942,-0,.004928,0,-.004866,0,.004853,0,-.004793,-0,.00478,0,-.004722,-0,.004709,-0,-.004653,0,.004641,0,-.004586,-0,.004574,0,-.004521,-0,.004509,-0,-.004458,-0,.004446,0,-.004396,-0,.004385,0,-.004336,0,.004325,0,-.004278,-0,.004267,0,-.004221,-0,.004211,0,-.004166,-0,.004156,0,-.004112,-0,.004102,0,-.00406,-0,.00405,-0,-.004008,-0,.003999,0,-.003959,-0,.00395,0,-.00391,-0,.003901,0,-.003863,-0,.003854,-0,-.003816,0,.003808,-0,-.003771,-0,.003763,0,-.003727,-0,.003719,0,-.003684,-0,.003676,0,-.003642,-0,.003634,0,-.0036,0,.003593,-0,-.00356,0,.003553,0,-.003521,-0,.003514,0,-.003482,-0,.003475,0,-.003445,-0,.003438,0,-.003408,0,.003401,-0,-.003372,0,.003365,0,-.003336,-0,.00333,0,-.003302,-0,.003295,0,-.003268,-0,.003262,0,-.003235,-0,.003229,-0,-.003202,0,.003196,-0,-.00317,-0,.003164,0,-.003139,-0,.003133,0,-.003108,-0,.003103,0,-.003078,-0,.003073,-0,-.003049,0,.003043,-0,-.00302,-0,.003015,0,-.002991,-0,.002986,0,-.002964,-0,.002959,0,-.002936,-0,.002931,0,-.002909,0,.002905,-0,-.002883,0,.002878,0,-.002857,-0,.002852,0,-.002832,-0,.002827,0,-.002807,-0,.002802,0,-.002782,-0,.002778,-0,-.002758,0,.002754,-0,-.002734,-0,.00273,0,-.002711,-0,.002707,0,-.002688,-0,.002684,0,-.002666,-0,.002662,0,-.002644,0,.00264,-0,-.002622,-0,.002618,0,-.0026,-0,.002597,0,-.002579,-0,.002576,0,-.002559,-0,.002555,0,-.002538,0,.002534,-0,-.002518,0,.002514,0,-.002498,-0,.002495,0,-.002479,-0,.002475,0,-.00246,-0,.002456,0,-.002441,-0,.002437,-0,-.002422,0,.002419,0,-.002404,-0,.002401,0,-.002386,-0,.002383,0,-.002368,-0,.002365,0,-.002351,-0,.002348,-0,-.002333,0,.00233,-0,-.002317,-0,.002313,0,-.0023,-0,.002297,0,-.002283,-0,.00228,0,-.002267,-0,.002264,0,-.002251,0,.002248,-0,-.002235,-0,.002232,0,-.00222,-0,.002217,0,-.002204,-0,.002201,0,-.002189,-0,.002186,0,-.002174,-0,.002171,-0,-.002159,0,.002157,0,-.002145,-0,.002142,0,-.00213,-0,.002128,0,-.002116,-0,.002114,0,-.002102,-0,.0021,0,-.002089,0,.002086,0,-.002075,-0,.002072,0,-.002061,-0,.002059,0,-.002048,-0,.002046,0,-.002035,-0,.002033,0,-.002022,0,.00202,-0,-.002009,-0,.002007,0,-.001997,-0,.001995,0,-.001984,-0,.001982,0,-.001972,-0,.00197,0,-.00196,-0,.001958,0,-.001948,-0,.001946,0,-.001936,-0,.001934,0,-.001924,-0,.001922,-0,-.001913,-0,.001911,-0,-.001901,-0,.001899,-0,-.00189,-0,.001888,0,-.001879,-0,.001877,0,-.001868,-0,.001866,0,-.001857,0,.001855,0,-.001846,0,.001844,0,-.001836,0,.001834,0,-.001825,-0,.001823,0,-.001815,-0,.001813,0,-.001804,-0,.001803,-0,-.001794,-0,.001792,-0,-.001784,-0,.001782,-0,-.001774,-0,.001772,0,-.001764,-0,.001763,0,-.001755,0,.001753,0,-.001745,0,.001743,0,-.001736,0,.001734,0,-.001726,0,.001724,0,-.001717,-0,.001715,0,-.001708,-0,.001706,-0,-.001698,-0,.001697,-0,-.001689,-0,.001688,-0,-.001681,-0,.001679,0,-.001672,-0,.00167,0,-.001663,-0,.001661,0,-.001654,0,.001653,0,-.001646,0,.001644,0,-.001637,0,.001636,0,-.001629,-0,.001627,0,-.001621,-0,.001619,0,-.001612,-0,.001611,-0,-.001604,-0,.001603,-0,-.001596,-0,.001595,-0,-.001588,-0,.001587,0,-.00158,-0,.001579,0,-.001573,-0,.001571,0,-.001565,0,.001563,0,-.001557,0,.001556,0,-.00155,0,.001548,0,-.001542,-0,.001541,0,-.001535,-0,.001533,-0,-.001527,-0,.001526,-0,-.00152,-0,.001519,-0,-.001513,-0,.001512,0,-.001506,-0,.001504,0,-.001499,-0,.001497,0,-.001492,0,.00149,0,-.001485,0,.001483,0,-.001478,0,.001476,0,-.001471,-0,.00147,0,-.001464,-0,.001463,0,-.001457,-0,.001456,-0,-.001451,-0,.00145,-0,-.001444,-0,.001443,-0,-.001438,-0,.001436,0,-.001431,-0,.00143,0,-.001425,-0,.001424,0,-.001418,0,.001417,0,-.001412,0,.001411,0,-.001406,0,.001405,0,-.0014,-0,.001399,0,-.001394,-0,.001392,0,-.001388,-0,.001386,-0,-.001381,-0,.00138,-0,-.001376,-0,.001374,-0,-.00137,-0,.001369,0,-.001364,-0,.001363,0,-.001358,-0,.001357,0,-.001352,0,.001351,0,-.001346,0,.001345,0,-.001341,-0,.00134,0,-.001335,-0,.001334,0,-.00133,-0,.001329,0,-.001324,-0,.001323,-0,-.001319,-0,.001318,-0,-.001313,-0,.001312,0,-.001308,-0,.001307,0,-.001302,-0,.001301,0,-.001297,0,.001296,0,-.001292,0,.001291,0,-.001287,0,.001286,0,-.001281,-0,.00128,0,-.001276,-0,.001275,0,-.001271,-0,.00127,-0,-.001266,-0,.001265,-0,-.001261,-0,.00126,-0,-.001256,-0,.001255,0,-.001251,-0,.00125,0,-.001246,-0,.001245,0,-.001241,0,.001241,0,-.001237,0,.001236,0,-.001232,-0,.001231,0,-.001227,-0,.001226,0,-.001222,-0,.001221,0,-.001218,-0,.001217,-0,-.001213,-0,.001212,-0,-.001208,-0,.001208,0,-.001204,-0,.001203,0,-.001199,-0,.001198,0,-.001195,-0,.001194,0,-.00119,0,.00119,0,-.001186,0,.001185,0,-.001182,-0,.001181,0,-.001177,-0,.001176,0,-.001173,-0,.001172,-0,-.001168,-0,.001168,-0,-.001164,-0,.001163,-0,-.00116,-0,.001159,0,-.001156,-0,.001155,0,-.001152,-0,.001151,0,-.001147,0,.001147,0,-.001143,0,.001143,0,-.001139,-0,.001138,0,-.001135,-0,.001134,0,-.001131,-0,.00113,0,-.001127,-0,.001126,-0,-.001123,-0,.001122,-0,-.001119,-0,.001118,0,-.001115,-0,.001115,0,-.001111,-0,.001111,0,-.001108,-0,.001107,0,-.001104,0,.001103,0,-.0011,0,.001099,0,-.001096,-0,.001095,0,-.001092,-0,.001092,0,-.001089,-0,.001088,0,-.001085,-0,.001084,-0,-.001081,-0,.001081,-0,-.001078,-0,.001077,0,-.001074,-0,.001073,0,-.00107,-0,.00107,0,-.001067,-0,.001066,0,-.001063,0,.001062,0,-.00106,0,.001059,0,-.001056,-0,.001055,0,-.001053,-0,.001052,0,-.001049,-0,.001048,0,-.001046,-0,.001045,-0,-.001042,-0,.001042,0,-.001039,-0,.001038,0,-.001035,-0,.001035,0,-.001032,-0,.001031,0,-.001029,0,.001028,0,-.001025,0,.001025,0,-.001022,-0,.001022,0,-.001019,-0,.001018,0,-.001016,-0,.001015,0,-.001012,-0,.001012,-0,-.001009,-0,.001009,-0,-.001006,-0,.001005,0,-.001003,-0,.001002,0,-.001,-0,999e-6,0,-997e-6,-0,996e-6,0,-993e-6,0,993e-6,0,-99e-5,0,99e-5,0,-987e-6,-0,987e-6,0,-984e-6,-0,984e-6,0,-981e-6,-0,981e-6,0,-978e-6,-0,978e-6,0,-975e-6,0,975e-6,0,-972e-6,-0,972e-6,0,-969e-6,0,969e-6,0,-966e-6,-0,966e-6,0,-963e-6,0,963e-6,0,-96e-5,-0,96e-5,-0,-958e-6,-0,957e-6,0,-955e-6,-0,954e-6,-0,-952e-6,-0,951e-6,0,-949e-6,-0,949e-6,-0,-946e-6,-0,946e-6,0,-943e-6,0,943e-6,0,-941e-6,-0,94e-5,0,-938e-6,0,937e-6,0,-935e-6,-0,935e-6,0,-932e-6,0,932e-6,0,-93e-5,-0,929e-6,-0,-927e-6,-0,926e-6,0,-924e-6,-0,924e-6,-0,-922e-6,-0,921e-6,0,-919e-6,-0,918e-6,-0,-916e-6,-0,916e-6,0,-914e-6,0,913e-6,0,-911e-6,-0,911e-6,0,-908e-6,0,908e-6,0,-906e-6,-0,905e-6,0,-903e-6,0,903e-6,0,-901e-6,-0,9e-4,-0,-898e-6,-0,898e-6,0,-896e-6,-0,895e-6,-0,-893e-6,-0,893e-6,0,-891e-6,0,89e-5,-0,-888e-6,-0,888e-6,0,-886e-6,0,885e-6,0,-883e-6,-0,883e-6,0,-881e-6,0,88e-5,0,-878e-6,-0,878e-6,-0,-876e-6,0,875e-6,0,-873e-6,-0,873e-6,-0,-871e-6,-0,871e-6,0,-869e-6,-0,868e-6,-0,-866e-6,-0,866e-6,0,-864e-6,0,864e-6,-0,-862e-6,-0,861e-6,0,-859e-6,0,859e-6,0,-857e-6,-0,857e-6,0,-855e-6,0,854e-6,0,-852e-6,-0,852e-6,-0,-85e-5,-0,85e-5,0,-848e-6,-0,847e-6,-0,-846e-6,-0,845e-6,0,-843e-6,-0,843e-6,-0,-841e-6,-0,841e-6,0,-839e-6,0,839e-6,0,-837e-6,-0,836e-6,0,-835e-6,0,834e-6,0,-832e-6,-0,832e-6,0,-83e-5,0,83e-5,0,-828e-6,-0,828e-6,-0,-826e-6,-0,826e-6,0,-824e-6,-0,823e-6,-0,-822e-6,-0,821e-6,0,-82e-5,-0,819e-6,-0,-817e-6,-0,817e-6,0,-815e-6,0,815e-6,0,-813e-6,-0,813e-6,0,-811e-6,0,811e-6,0,-809e-6,-0,809e-6,0,-807e-6,0,807e-6,0,-805e-6,-0,805e-6,-0,-803e-6,-0,803e-6,0,-801e-6,-0,801e-6,-0,-799e-6,-0,799e-6,0,-797e-6,-0,797e-6,-0,-795e-6,-0,795e-6,0,-793e-6,0,793e-6,0,-791e-6,-0,791e-6,0,-789e-6,0,789e-6,0,-787e-6,-0,787e-6,0,-785e-6,0,785e-6,0,-783e-6,-0,783e-6,-0,-781e-6,-0,781e-6,0,-779e-6,-0,779e-6,-0,-777e-6,-0,777e-6,0,-776e-6,-0,775e-6,-0,-774e-6,-0,773e-6,0,-772e-6,0,771e-6,0,-77e-5,-0,77e-5,0,-768e-6,0,768e-6,0,-766e-6,-0,766e-6,-0,-764e-6,0,764e-6,0,-763e-6,-0,762e-6,-0,-761e-6,-0,76e-5,0,-759e-6,-0,759e-6,-0,-757e-6,-0,757e-6,0,-755e-6,0,755e-6,0,-754e-6,-0,753e-6,0,-752e-6,0,751e-6,0,-75e-5,-0,75e-5,0,-748e-6,0,748e-6,0,-746e-6,-0,746e-6,-0,-745e-6,-0,744e-6,0,-743e-6,-0,743e-6,-0,-741e-6,-0,741e-6,0,-74e-5,-0,739e-6,-0,-738e-6,-0,738e-6,0,-736e-6,0,736e-6,0,-734e-6,-0,734e-6,0,-733e-6,0,732e-6,0,-731e-6,-0,731e-6,0,-729e-6,0,729e-6,0,-728e-6,-0,727e-6,-0,-726e-6,-0,726e-6,0,-724e-6,-0,724e-6,-0,-723e-6,-0,722e-6,0,-721e-6,-0,721e-6,-0,-719e-6,-0,719e-6,0,-718e-6,0,718e-6,0,-716e-6,-0,716e-6,0,-715e-6,0,714e-6,0,-713e-6,-0,713e-6,0,-711e-6,0,711e-6,0,-71e-5,-0,71e-5,-0,-708e-6,-0,708e-6,0,-707e-6,-0,706e-6,-0,-705e-6,-0,705e-6,0,-704e-6,-0,703e-6,-0,-702e-6,-0,702e-6,0,-7e-4,0,7e-4,0,-699e-6,-0,699e-6,0,-697e-6,0,697e-6,0,-696e-6,-0,696e-6,0,-694e-6,0,694e-6,0,-693e-6,-0,693e-6,-0,-691e-6,-0,691e-6,0,-69e-5,-0,69e-5,-0,-688e-6,-0,688e-6,0,-687e-6,-0,687e-6,-0,-685e-6,-0,685e-6,0,-684e-6,0,684e-6,0,-682e-6,-0,682e-6,0,-681e-6,0,681e-6,0,-68e-5,-0,679e-6,0,-678e-6,-0,678e-6,0,-677e-6,-0,676e-6,-0,-675e-6,-0,675e-6,0,-674e-6,-0,674e-6,-0,-672e-6,-0,672e-6,0,-671e-6,-0,671e-6,0,-67e-5,-0,669e-6,0,-668e-6,0,668e-6,0,-667e-6,-0,666e-6,0,-665e-6,0,665e-6,0,-664e-6,-0,664e-6,0,-663e-6,-0,662e-6,0,-661e-6,-0,661e-6,-0,-66e-5,-0,66e-5,0,-658e-6,-0,658e-6,-0,-657e-6,-0,657e-6,0,-656e-6,0,656e-6,0,-654e-6,-0,654e-6,0,-653e-6,0,653e-6,0,-652e-6,-0,651e-6,0,-65e-5,0,65e-5,0,-649e-6,-0,649e-6,-0,-648e-6,-0,648e-6,0,-646e-6,-0,646e-6,-0,-645e-6,-0,645e-6,0,-644e-6,-0,644e-6,-0,-643e-6,-0,642e-6,0,-641e-6,0,641e-6,0,-64e-5,-0,64e-5,0,-639e-6,0,638e-6,0,-637e-6,-0,637e-6,0,-636e-6,0,636e-6,0,-635e-6,-0,635e-6,-0,-634e-6,-0,633e-6,0,-632e-6,-0,632e-6,-0,-631e-6,-0,631e-6,0,-63e-5,-0,63e-5,-0,-629e-6,-0,628e-6,0,-627e-6,0,627e-6,0,-626e-6,-0,626e-6,0,-625e-6,0,625e-6,0,-624e-6,-0,623e-6,0,-622e-6,-0,622e-6]}};let hn,pn,dn,mn,yn,bn,gn;var vn={applyAmpEnvelope(e,n,t){switch(hn=e.adsr,e.waveform){default:dn=hn.attack;break;case"SINE":case"TRIANGLE":dn=0===hn.attack?.002:hn.attack}pn=n.gain,bn=(yn=t+dn)+hn.decay,pn.cancelScheduledValues(t),pn.setValueAtTime(0,t),pn.linearRampToValueAtTime(1,yn),pn.linearRampToValueAtTime(hn.sustain,bn)},applyAmpRelease(e,n,t){switch(hn=e.adsr,e.waveform){default:mn=hn.release;break;case"SINE":case"TRIANGLE":mn=0===hn.release?.002:hn.release}(pn=n.gain).cancelScheduledValues(t),pn.setValueAtTime(pn.value,t),pn.linearRampToValueAtTime(0,t+mn)},applyPitchEnvelope(e,n,t){if(0===(hn=e.pitch).range)return;const a=n instanceof AudioBufferSourceNode;pn=a?n.playbackRate:n.frequency,yn=t+hn.attack,bn=yn+hn.decay;const i=hn.org=pn.value;gn=a?hn.range/24:i+i/1200,a&&hn.range<0&&(gn=-gn);const r=gn*(hn.range/24);pn.cancelScheduledValues(t),pn.setValueAtTime(i,t),pn.linearRampToValueAtTime(i+r,yn),pn.linearRampToValueAtTime(i+r*hn.sustain,bn)},applyPitchRelease(e,n,t){0!==(hn=e.pitch).range&&"number"==typeof hn.org&&((pn=n instanceof AudioBufferSourceNode?n.playbackRate:n.frequency).cancelScheduledValues(t),pn.setValueAtTime(pn.value,t),pn.linearRampToValueAtTime(hn.org,t+hn.release))}};let Sn,An,wn,Tn,_n,Pn,xn,Fn,En,In=0,Mn=!1,Dn=!1,Rn=[];const On=e=>{wn=e,Tn=Ve.createGainNode(wn),(_n=wn.createBiquadFilter()).type="highpass",_n.frequency.value=30,Pn=wn.createDynamicsCompressor(),Tn.connect(_n),_n.connect(Pn),Pn.connect(wn.destination);const n=(xn={NOISE:wn.createBuffer(1,wn.sampleRate/10,wn.sampleRate),CUSTOM:[]}).NOISE.getChannelData(0);for(let e=0,t=n.length;e<t;++e)n[e]=2*Math.random()-1;Object.keys(cn).forEach(e=>{xn[e]=wn.createPeriodicWave(new Float32Array(cn[e].real),new Float32Array(cn[e].imag))}),Rn=new Array(h.INSTRUMENT_AMOUNT);for(let e=0;e<h.INSTRUMENT_AMOUNT;++e)Rn[e]={};!function(){En=new Array(h.INSTRUMENT_AMOUNT);for(let e=0;e<En.length;++e){const n=En[e]={panner:Ve.createStereoPanner(wn),overdrive:$e.createOverdrive(wn),eq:$e.createEQ(wn),filter:$e.createFilter(wn),delay:$e.createDelay(wn),voices:new Array(h.OSCILLATOR_AMOUNT),output:Ve.createGainNode(wn)};for(let e=0;e<h.OSCILLATOR_AMOUNT;++e){n.voices[e]=[];const t=2;for(let a=0;a<h.INSTRUMENT_AMOUNT*t;++a){const t={oscillatorNode:Ve.createGainNode(wn),adsrNode:Ve.createGainNode(wn)};t.oscillatorNode.connect(t.adsrNode),t.adsrNode.connect(n.output),n.voices[e].push(t)}}Qe.applyRouting(n,Tn)}}(),kn.initialized=!0},qn=()=>{Rn.forEach((e,n)=>{ze(Object.values(e),(e,t)=>{Bn(En[n],t,e,n),Ve.stopOscillation(e.generator,wn.currentTime)}),Rn[n]={}}),In=0},Ln=e=>{e.forEach((e,n)=>{xn.CUSTOM[n]=new Array(e.oscillators.length),e.oscillators.forEach((e,t)=>{e.table&&(xn.CUSTOM[n][t]=Vn(n,t,e.table))})})},Nn=e=>{e.instruments.forEach((e,n)=>{const t=En[n];t.output.gain.value=e.volume,t.panner&&"number"==typeof e.panning&&(t.panner.pan.value=e.panning),$e.applyConfiguration("filter",t,e.filter,Tn),$e.applyConfiguration("delay",t,e.delay,Tn),$e.applyConfiguration("eq",t,e.eq,Tn),$e.applyConfiguration("overdrive",t,e.overdrive,Tn)})},kn={initialized:!1,reset:qn,cacheCustomTables:Ln,applyModules:Nn,isSupported:()=>"undefined"!=typeof AudioContext||"undefined"!=typeof webkitAudioContext,async init(e){An=(Sn=e).state,wn=await Ve.init(),On(wn),kn.cacheCustomTables(An.song.activeSong.instruments)},getAudioContext:()=>wn,togglePlayback(e){(Mn=e)?(Dn=!Dn,kn.toggleRecordingState()):(kn.reset(),Dn&&Fn&&(Fn.stop(),Fn.exportWAV()))},toggleRecordingState(){(Dn=!Dn)?(Fn||(Fn=new on(Tn,{callback:zn})),Mn&&Fn.record()):Fn&&(Fn.stop(),Fn.exportWAV())},isRecording:()=>Dn,noteOn(e,n,t=wn.currentTime){if(1===e.action){i.a.set(e,"id",++In);const a=fn.getFrequency(e.note,e.octave),r=[],s=En[n.id];let l;n.oscillators.forEach((e,i)=>{if(!e.enabled)return;l=n.oscillators[i];const o=function(e,n){const t=e.voices[n];if(t.length)return t.shift();return null}(s,i);if(null===o)return;const{oscillatorNode:u,adsrNode:f}=o;let c;if("NOISE"===e.waveform)(c=wn.createBufferSource()).buffer=xn.NOISE,c.loop=!0,c.playbackRate.value=nn.tuneBufferPlayback(l);else{if("PWM"===e.waveform)c=Ve.createPWM(wn,t,t+2,u);else{let t;if(c=wn.createOscillator(),!(t="CUSTOM"!==e.waveform?xn[e.waveform]:xn.CUSTOM[n.id][i]))return;c.setPeriodicWave(t)}c.frequency.value=nn.tuneToOscillator(a,l)}Ve.setValue(u.gain,e.volume,wn),Ve.setValue(f.gain,1,wn),vn.applyAmpEnvelope(e,f,t),vn.applyPitchEnvelope(e,c,t),"PWM"!==e.waveform&&c.connect(u),Ve.startOscillation(c,t),r[i]={generator:c,vo:e,frequency:a,gain:u,outputNode:f,gliding:!1}}),Rn[n.id][e.id]=r}e.mp&&Qe.applyModuleParamChange(e,En[n.id],n,Object.values(Rn[n.id]),t,Tn)},noteOff(e,n=wn.currentTime){const t=e.id,a=e.instrument,i=Rn[a][t];i&&i.forEach((e,i)=>{e&&(vn.applyAmpRelease(e.vo,e.outputNode,n),vn.applyPitchRelease(e.vo,e.generator,n),Bn(En[a],i,e,a,t),Ve.stopOscillation(e.generator,n+e.vo.adsr.release))})},applyModule(e,n,t){$e.applyConfiguration(e,En[n],t,Tn)},cacheAllOscillators(e,n){n.oscillators.forEach((n,t)=>{kn.updateOscillator("waveform",e,t,n)})},updateOscillator(e,n,t,a){if(!/waveform|tuning|volume/.test(e))throw new Error(`cannot update unsupported oscillator property ${e}`);const i=Object.values(Rn[n]);switch(e){case"waveform":a.enabled&&"CUSTOM"===a.waveform?nn.adjustEventWaveForms(i,t,Vn(n,t,a.table)):nn.adjustEventWaveForms(i,t,xn[a.waveform]);break;case"volume":nn.adjustEventVolume(i,t,a);break;case"tuning":nn.adjustEventTunings(i,t,a)}},adjustInstrumentVolume(e,n){En[e].output.gain.value=n},adjustInstrumentPanning(e,n){En[e].panner.pan.value=n}};var Cn=kn;function Bn(e,n,t,a,i=null){t.generator.onended=(()=>{t.generator.disconnect(),null!==i&&delete Rn[a][i],e.voices[n].push({oscillatorNode:t.gain,adsrNode:t.outputNode})})}function Vn(e,n,t){return xn.CUSTOM[e][n]=Ve.createWaveTableFromGraph(wn,t)}function zn(e){const n=document.createElement("a");n.setAttribute("href",window.URL.createObjectURL(e)),n.setAttribute("target","_blank"),n.setAttribute("download","efflux-output.wav"),n.click(),Fn.clear(),Fn=null,Dn=!1,window.URL.revokeObjectURL(e),Sn.commit("showNotification",{message:Sn.getters.t("messages.recordingSaved")})}function Wn(){this.head=null,this.tail=null,this._length=0}function Gn(e,n){this._list=e,this.data=n,this.previous=null,this.next=null}Gn.prototype.remove=function(){this.previous&&(this.previous.next=this.next),this.next&&(this.next.previous=this.previous),this._list.head===this&&(this._list.head=this.next),this._list.tail===this&&(this._list.tail=this.previous),--this._list._length,this.data=null,this.previous=null,this.next=null,this._list=null},Wn.prototype.add=function(e){const n=new Gn(this,e);return 0===this._length?(this.head=n,this.tail=n):(this.tail.next=n,n.previous=this.tail,this.tail=n),++this._length,n},Wn.prototype.addBefore=function(e,n){const t=e instanceof Gn?e:this.getNodeByData(e),a=new Gn(this,n);if(t){if(t===this.head)this.head=a;else{const e=t.previous;e.next=a,a.previous=e}t.previous=a}return a.next=t,++this._length,a},Wn.prototype.addAfter=function(e,n){const t=e instanceof Gn?Gn:this.getNodeByData(e),a=new Gn(this,n);if(t===this.tail)this.tail=a;else{const e=t.next;e.previous=a,a.next=e}return a.previous=t,t.next=a,++this._length,a},Wn.prototype.remove=function(e){if(e instanceof Gn)e.remove();else if("number"==typeof e){let n=this.head;if(0===this._length||e<0||e>this._length)return;if(0===e)this.head=n.next,this.head?this.head.previous=null:this.tail=n;else if(e===this._length-1)this.tail=this.tail.previous,this.tail.next=null;else{let t=0;for(;t<e;)n=n.next,++t;const a=n.previous,i=n.next;a.next=i,i.previous=a}--this._length}else if("object"==typeof e){const n=this.getNodeByData(e);n&&n.remove()}},Wn.prototype.getNodeByData=function(e){let n=this.head;for(;n;){if(n.data===e)return n;n=n.next}return null},Wn.prototype.flush=function(){this.head=this.tail=null,this._length=0};var Qn=Wn,Un={enabled:!1,restore:!1,countIn:!1,countInComplete:!1,play(e,n,t,a,i){if(1===e&&n%(t/8))return;if(2==e&&n%(t/4))return;let r=220;n%t==0?r=440:n%(t/4)&&(r=880),Ve.beep(i,r,a,.05)}},jn=t(5),Hn=t.n(jn);function Xn(e,n,t){const{beatAmount:a,nextNoteTime:i,activePattern:r,channelQueue:s}=e.state.sequencer,l=e.state.song.activeSong;n.seq.playing=!0;const o=60/l.meta.tempo*a,u=l.patterns[r];n.seq.mpLength=u?o/u.steps:0,Cn.noteOn(n,l.instruments[n.instrument],i);const f=1===n.action,c=s[t];if(0!==n.action){let t=c.head;if(!t&&e.state.sequencer.looping)return void Yn(e.state.sequencer,n,i+n.seq.length);for(;t;)Yn(e.state.sequencer,t.data,i),t.remove(),t=c.head}f?c.add(n):Yn(e.state.sequencer,n,i+n.seq.mpLength)}function Yn(e,n,t){const a=Ve.createTimer(Cn.getAudioContext(),t,()=>{n.seq.playing=!1,Cn.noteOff(n),Kn(e,a)});e.queueHandlers.push(a)}function Kn(e,n){n.disconnect(),n.onended=null;const t=e.queueHandlers.indexOf(n);-1!==t&&e.queueHandlers.splice(t,1)}function Jn(e){const n=e.state.song.activeSong,t=n.patterns.length-1,a=e.state.sequencer;a.nextNoteTime+=60/n.meta.tempo*4/a.stepPrecision;const i=a.currentStep+1;if(e.commit("setCurrentStep",i),i===a.stepPrecision){if(e.commit("setCurrentStep",0),a.activePattern+1>t){if(e.commit("setActivePattern",0),Cn.isRecording()&&!a.looping)return void e.commit("setPlaying",!1)}else a.looping||e.commit("gotoNextPattern",n);e.commit("setPosition",{activeSong:n,pattern:a.activePattern,currentTime:a.nextNoteTime}),a.recording&&a.metronome.countIn&&!a.metronome.countInComplete&&(a.metronome.enabled=a.metronome.restore,a.metronome.countInComplete=!0,a.firstMeasureStartTime=Cn.getAudioContext().currentTime,e.commit("setActivePattern",0)),e.commit("setActivePattern",a.activePattern)}}var $n={state:{playing:!1,looping:!1,recording:!1,scheduleAheadTime:.2,stepPrecision:64,beatAmount:4,beatUnit:4,queueHandlers:[],channelQueue:new Array(h.INSTRUMENT_AMOUNT),activePattern:0,measureStartTime:0,firstMeasureStartTime:0,currentStep:0,nextNoteTime:0,channels:0,worker:null,metronome:Un},getters:{isPlaying:e=>e.playing,isLooping:e=>e.looping,isRecording:e=>e.recording,isMetronomeEnabled:e=>e.metronome.enabled,amountOfSteps:(e,n)=>n.activeSong.patterns[e.activePattern].steps,position:e=>({pattern:e.activePattern,step:e.currentStep})},mutations:{setPlaying(e,n){if(e.playing=!!n,e.playing)e.recording&&e.metronome.countIn&&(e.metronome.countInComplete=!1,e.metronome.enabled=!0),e.currentStep=0,e.worker.postMessage({cmd:"start",interval:1e3*e.scheduleAheadTime/4});else{for(e.worker.postMessage({cmd:"stop"});e.queueHandlers.length;)Kn(e,e.queueHandlers[0]);e.channelQueue.forEach(e=>e.flush())}},setLooping(e,n){e.looping=!!n},setRecording(e,n){e.recording=!!n},setActivePattern(e,n){e.activePattern=n},gotoPreviousPattern(e){e.activePattern>0&&(e.activePattern=e.activePattern-1)},gotoNextPattern(e,n){const t=n.patterns.length-1;e.activePattern<t&&(e.activePattern=e.activePattern+1)},setCurrentStep(e,n){e.currentStep=n},setPatternSteps(e,{pattern:n,steps:t}){const a=n.steps;n.channels.forEach((e,r)=>{const s=new Array(t);let l,o,u;for(l=0;l<t;++l)s[l]=0;if(t<a)for(u=a/t,l=0,o=0;l<t;++l,o+=u)s[l]=e[o];else for(u=t/a,l=0,o=0;l<a;++l,o+=u)s[o]=e[l];i.a.set(n.channels,r,s),i.a.set(n,"steps",t)})},setPosition(e,{activeSong:n,pattern:t,currentTime:a}){t>=n.patterns.length&&(t=n.patterns.length-1),e.activePattern!==t&&(e.currentStep=0),"number"!=typeof a&&(a=Cn.getAudioContext()?Cn.getAudioContext().currentTime:0),e.activePattern=t,e.nextNoteTime=a,e.measureStartTime=a,e.firstMeasureStartTime=a-t*(60/n.meta.tempo*e.beatAmount),e.channels=n.patterns[e.activePattern].channels,0===e.activePattern&&e.channelQueue.forEach(n=>{let t=n.head;for(;t;)Yn(e,t.data,a),t.data.seq.playing=!1,t.remove(),t=n.head})},setMetronomeEnabled(e,n){e.metronome.enabled=!!n}},actions:{prepareSequencer:({state:e},n)=>new Promise(t=>{for(let n=0;n<e.channelQueue.length;++n)e.channelQueue[n]=new Qn;e.worker=new Hn.a,e.worker.onmessage=(({data:t})=>{"collect"===t.cmd&&e.playing&&function(e){const n=e.state.sequencer,t=Cn.getAudioContext(),a=!(n.recording&&n.metronome.countIn&&!n.metronome.countInComplete);let i,r,s,l,o,u;for(;n.nextNoteTime<t.currentTime+n.scheduleAheadTime;){if(a)for(u=n.nextNoteTime-n.measureStartTime,i=n.channels.length;i--;)for(s=(r=n.channels[i]).length;s--;)(l=r[s])&&!l.recording&&l.seq.startMeasure===n.activePattern&&((o=l.seq).playing||u>=o.startMeasureOffset&&u<o.startMeasureOffset+o.length&&Xn(e,l,i));n.metronome.enabled&&n.metronome.play(2,n.currentStep,n.stepPrecision,n.nextNoteTime,Cn.getAudioContext()),Jn(e)}}(n)}),t()})}};const Zn=window;let et,nt;const{state:tt,mutations:at,actions:it}=$n,rt={state:{sequencer:tt,song:{}},commit(e,n){at[e](tt,n)}},{console:st}=Zn,lt=(e="log",n,t)=>{st&&st[e](n,t)};n.default={l:e=>{try{return et||(et=new(Zn.AudioContext||Zn.webkitAudioContext),On(et),it.prepareSequencer({state:tt},rt)),(nt=b(e))?(rt.state.song.activeSong=nt,qn(),Ln(nt.instruments),Nn(nt),at.setActivePattern(tt,0),!0):(lt("error","INVALID SONG"),!1)}catch(e){return lt("error","LOAD ERROR",e),!1}},p:()=>{at.setPlaying(tt,!0)},s:()=>{at.setPlaying(tt,!1)}}}]).default;